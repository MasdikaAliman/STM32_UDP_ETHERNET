
BARELANG63_STM32F4_ETHERNET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800599c  0800599c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a4  080059a4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059a8  080059a8  000159a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080059ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          00000270  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000310  20000310  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166b5  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff4  00000000  00000000  00036785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00039780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001140  00000000  00000000  0003a9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002678d  00000000  00000000  0003bb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013dfa  00000000  00000000  0006228d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e060b  00000000  00000000  00076087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00156692  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000507c  00000000  00000000  001566e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005968 	.word	0x08005968

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	08005968 	.word	0x08005968

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_ZN12BarelangMainC1Ev>:
 */
#include "barelangMain.hpp"

uint32_t mainTick = 0;
int asep = 0;
BarelangMain::BarelangMain() {
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	stm_udp = new BarelangW5500();
 80004c8:	203c      	movs	r0, #60	; 0x3c
 80004ca:	f005 f927 	bl	800571c <_Znwj>
 80004ce:	4603      	mov	r3, r0
 80004d0:	461c      	mov	r4, r3
 80004d2:	4620      	mov	r0, r4
 80004d4:	f000 f8a6 	bl	8000624 <_ZN13BarelangW5500C1Ev>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	601c      	str	r4, [r3, #0]
}
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4618      	mov	r0, r3
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd90      	pop	{r4, r7, pc}
	...

080004e8 <_ZN12BarelangMain4LoopEv>:

BarelangMain::~BarelangMain() {
	delete stm_udp;
}

void BarelangMain::Loop() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	if (ElapsedTime(mainTick, LoopDelay)) {
 80004f0:	f002 fb9e 	bl	8002c30 <HAL_GetTick>
 80004f4:	4602      	mov	r2, r0
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <_ZN12BarelangMain4LoopEv+0x70>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	2b20      	cmp	r3, #32
 80004fe:	bf8c      	ite	hi
 8000500:	2301      	movhi	r3, #1
 8000502:	2300      	movls	r3, #0
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d022      	beq.n	8000550 <_ZN12BarelangMain4LoopEv+0x68>
		SetTick(mainTick);
 800050a:	f002 fb91 	bl	8002c30 <HAL_GetTick>
 800050e:	4603      	mov	r3, r0
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <_ZN12BarelangMain4LoopEv+0x70>)
 8000512:	6013      	str	r3, [r2, #0]
		dataSTM.AccelX = 150;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <_ZN12BarelangMain4LoopEv+0x74>)
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <_ZN12BarelangMain4LoopEv+0x78>)
 8000518:	60da      	str	r2, [r3, #12]
		dataSTM.AccelY = 100;
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <_ZN12BarelangMain4LoopEv+0x74>)
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <_ZN12BarelangMain4LoopEv+0x7c>)
 800051e:	611a      	str	r2, [r3, #16]
		dataSTM.Yaw = 180;
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <_ZN12BarelangMain4LoopEv+0x74>)
 8000522:	4a11      	ldr	r2, [pc, #68]	; (8000568 <_ZN12BarelangMain4LoopEv+0x80>)
 8000524:	609a      	str	r2, [r3, #8]
		dataSTM.EKiri = 100;
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <_ZN12BarelangMain4LoopEv+0x74>)
 8000528:	2264      	movs	r2, #100	; 0x64
 800052a:	615a      	str	r2, [r3, #20]
		dataSTM.Ebelakang = 100;
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <_ZN12BarelangMain4LoopEv+0x74>)
 800052e:	2264      	movs	r2, #100	; 0x64
 8000530:	61da      	str	r2, [r3, #28]
		dataSTM.Ekanan = 100;
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <_ZN12BarelangMain4LoopEv+0x74>)
 8000534:	2264      	movs	r2, #100	; 0x64
 8000536:	619a      	str	r2, [r3, #24]
		stm_udp->udpProcess();
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f945 	bl	80007cc <_ZN13BarelangW550010udpProcessEv>
		stm_udp->udpSend(&dataSTM, sizeof(dataSTM));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2238      	movs	r2, #56	; 0x38
 8000548:	4904      	ldr	r1, [pc, #16]	; (800055c <_ZN12BarelangMain4LoopEv+0x74>)
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f9bc 	bl	80008c8 <_ZN13BarelangW55007udpSendEPKvj>
	}
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200000bc 	.word	0x200000bc
 800055c:	200000cc 	.word	0x200000cc
 8000560:	43160000 	.word	0x43160000
 8000564:	42c80000 	.word	0x42c80000
 8000568:	43340000 	.word	0x43340000

0800056c <_ZN13BarelangW550012W5500_SelectEv>:
	uint16_t my_port = 2002;
	wiz_NetInfo myIpConf = { .mac = { 0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef },
			.ip = { 192, 168, 0, 4 },   // stm32 client by my choice
			.sn = { 255, 255, 255, 0 }, .gw = { 192, 168, 0, 1 }, .dns = { 8, 8,
					8, 8 }, .dhcp = NETINFO_STATIC };
	static void W5500_Select(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2110      	movs	r1, #16
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <_ZN13BarelangW550012W5500_SelectEv+0x14>)
 8000576:	f003 f84b 	bl	8003610 <HAL_GPIO_WritePin>
	}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020800 	.word	0x40020800

08000584 <_ZN13BarelangW550014W5500_UnselectEv>:

	static void W5500_Unselect(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2110      	movs	r1, #16
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <_ZN13BarelangW550014W5500_UnselectEv+0x14>)
 800058e:	f003 f83f 	bl	8003610 <HAL_GPIO_WritePin>
	}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020800 	.word	0x40020800

0800059c <_ZN13BarelangW550014W5500_ReadBuffEPht>:

	static void W5500_ReadBuff(uint8_t *buff, uint16_t len) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	807b      	strh	r3, [r7, #2]
		HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 80005a8:	887a      	ldrh	r2, [r7, #2]
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <_ZN13BarelangW550014W5500_ReadBuffEPht+0x24>)
 80005b2:	f003 fe80 	bl	80042b6 <HAL_SPI_Receive>
	}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000019c 	.word	0x2000019c

080005c4 <_ZN13BarelangW550015W5500_WriteBuffEPht>:

	static void W5500_WriteBuff(uint8_t *buff, uint16_t len) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
		HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 80005d0:	887a      	ldrh	r2, [r7, #2]
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <_ZN13BarelangW550015W5500_WriteBuffEPht+0x24>)
 80005da:	f003 fd30 	bl	800403e <HAL_SPI_Transmit>
	}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000019c 	.word	0x2000019c

080005ec <_ZN13BarelangW550014W5500_ReadByteEv>:

	static uint8_t W5500_ReadByte(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
		uint8_t byte;
		W5500_ReadBuff(&byte, sizeof(byte));
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	2101      	movs	r1, #1
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffd0 	bl	800059c <_ZN13BarelangW550014W5500_ReadBuffEPht>
		return byte;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
	}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <_ZN13BarelangW550015W5500_WriteByteEh>:

	static void W5500_WriteByte(uint8_t byte) {
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
		W5500_WriteBuff(&byte, sizeof(byte));
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	2101      	movs	r1, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffd5 	bl	80005c4 <_ZN13BarelangW550015W5500_WriteBuffEPht>
	}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <_ZN13BarelangW5500C1Ev>:
//extern PCtoSTM32 dataPC;
//extern STM32toPC dataSTM;
extern int count;
int32_t recv_len;

BarelangW5500::BarelangW5500() {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	731a      	strb	r2, [r3, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a34      	ldr	r2, [pc, #208]	; (8000718 <_ZN13BarelangW5500C1Ev+0xf4>)
 8000648:	6812      	ldr	r2, [r2, #0]
 800064a:	61da      	str	r2, [r3, #28]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8000652:	841a      	strh	r2, [r3, #32]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f240 72d2 	movw	r2, #2002	; 0x7d2
 800065a:	845a      	strh	r2, [r3, #34]	; 0x22
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3324      	adds	r3, #36	; 0x24
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	f8c3 2013 	str.w	r2, [r3, #19]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2208      	movs	r2, #8
 8000674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	22dc      	movs	r2, #220	; 0xdc
 800067c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	22ab      	movs	r2, #171	; 0xab
 8000684:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	22cd      	movs	r2, #205	; 0xcd
 800068c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	22ef      	movs	r2, #239	; 0xef
 8000694:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	22c0      	movs	r2, #192	; 0xc0
 800069c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	22a8      	movs	r2, #168	; 0xa8
 80006a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2204      	movs	r2, #4
 80006ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	22ff      	movs	r2, #255	; 0xff
 80006c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	22c0      	movs	r2, #192	; 0xc0
 80006cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	22a8      	movs	r2, #168	; 0xa8
 80006d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2208      	movs	r2, #8
 80006e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2208      	movs	r2, #8
 80006ec:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2208      	movs	r2, #8
 80006f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2208      	movs	r2, #8
 80006fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2201      	movs	r2, #1
 8000704:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	init();
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f807 	bl	800071c <_ZN13BarelangW55004initEv>
}
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	08005980 	.word	0x08005980

0800071c <_ZN13BarelangW55004initEv>:
void BarelangW5500::init() {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8000724:	4909      	ldr	r1, [pc, #36]	; (800074c <_ZN13BarelangW55004initEv+0x30>)
 8000726:	480a      	ldr	r0, [pc, #40]	; (8000750 <_ZN13BarelangW55004initEv+0x34>)
 8000728:	f002 f934 	bl	8002994 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800072c:	4909      	ldr	r1, [pc, #36]	; (8000754 <_ZN13BarelangW55004initEv+0x38>)
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <_ZN13BarelangW55004initEv+0x3c>)
 8000730:	f002 f956 	bl	80029e0 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000734:	4909      	ldr	r1, [pc, #36]	; (800075c <_ZN13BarelangW55004initEv+0x40>)
 8000736:	480a      	ldr	r0, [pc, #40]	; (8000760 <_ZN13BarelangW55004initEv+0x44>)
 8000738:	f002 f97e 	bl	8002a38 <reg_wizchip_spiburst_cbfunc>
	this->udpConnect();
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f811 	bl	8000764 <_ZN13BarelangW550010udpConnectEv>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	08000585 	.word	0x08000585
 8000750:	0800056d 	.word	0x0800056d
 8000754:	08000607 	.word	0x08000607
 8000758:	080005ed 	.word	0x080005ed
 800075c:	080005c5 	.word	0x080005c5
 8000760:	0800059d 	.word	0x0800059d

08000764 <_ZN13BarelangW550010udpConnectEv>:

uint8_t BarelangW5500::udpConnect() {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	wizchip_setnetinfo(&myIpConf);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3324      	adds	r3, #36	; 0x24
 8000770:	4618      	mov	r0, r3
 8000772:	f002 f98d 	bl	8002a90 <wizchip_setnetinfo>

	if (getSn_SR(UDP_SOCKET) != SOCK_CLOSED)
 8000776:	f44f 704a 	mov.w	r0, #808	; 0x328
 800077a:	f001 fd8f 	bl	800229c <WIZCHIP_READ>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2300      	moveq	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <_ZN13BarelangW550010udpConnectEv+0x30>
		close(UDP_SOCKET);
 800078e:	2001      	movs	r0, #1
 8000790:	f000 feee 	bl	8001570 <close>

	if (socket(UDP_SOCKET, Sn_MR_UDP, my_port, 0) == UDP_SOCKET) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8000798:	2300      	movs	r3, #0
 800079a:	2102      	movs	r1, #2
 800079c:	2001      	movs	r0, #1
 800079e:	f000 fdb1 	bl	8001304 <socket>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	bf0c      	ite	eq
 80007a8:	2301      	moveq	r3, #1
 80007aa:	2300      	movne	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d004      	beq.n	80007bc <_ZN13BarelangW550010udpConnectEv+0x58>
		socketCreated = 1;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2201      	movs	r2, #1
 80007b6:	731a      	strb	r2, [r3, #12]
		return 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e003      	b.n	80007c4 <_ZN13BarelangW550010udpConnectEv+0x60>
	} else {
		socketCreated = 0;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	731a      	strb	r2, [r3, #12]
		return 0;
 80007c2:	2300      	movs	r3, #0
	}
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_ZN13BarelangW550010udpProcessEv>:

void BarelangW5500::udpProcess() {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	if (!socketCreated) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7b1b      	ldrb	r3, [r3, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d117      	bne.n	800080c <_ZN13BarelangW550010udpProcessEv+0x40>
		if (ElapsedTime(lastReconnectAttempt, DisconnectTime)) {
 80007dc:	f002 fa28 	bl	8002c30 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	f240 122b 	movw	r2, #299	; 0x12b
 80007ec:	4293      	cmp	r3, r2
 80007ee:	bf8c      	ite	hi
 80007f0:	2301      	movhi	r3, #1
 80007f2:	2300      	movls	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00c      	beq.n	8000814 <_ZN13BarelangW550010udpProcessEv+0x48>
			this->udpConnect();
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffb2 	bl	8000764 <_ZN13BarelangW550010udpConnectEv>
			SetTick(lastReconnectAttempt);
 8000800:	f002 fa16 	bl	8002c30 <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	619a      	str	r2, [r3, #24]
		}
		return;
 800080a:	e003      	b.n	8000814 <_ZN13BarelangW550010udpProcessEv+0x48>
	}
	udpReceive();
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f805 	bl	800081c <_ZN13BarelangW550010udpReceiveEv>
 8000812:	e000      	b.n	8000816 <_ZN13BarelangW550010udpProcessEv+0x4a>
		return;
 8000814:	bf00      	nop
}
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <_ZN13BarelangW550010udpReceiveEv>:

void BarelangW5500::udpReceive() {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af02      	add	r7, sp, #8
 8000822:	6078      	str	r0, [r7, #4]
	if (!socketCreated)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7b1b      	ldrb	r3, [r3, #12]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d045      	beq.n	80008b8 <_ZN13BarelangW550010udpReceiveEv+0x9c>
		return;
	if (getSn_RX_RSR(UDP_SOCKET) > 0) {
 800082c:	2001      	movs	r0, #1
 800082e:	f001 feda 	bl	80025e6 <getSn_RX_RSR>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf14      	ite	ne
 8000838:	2301      	movne	r3, #1
 800083a:	2300      	moveq	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d021      	beq.n	8000886 <_ZN13BarelangW550010udpReceiveEv+0x6a>

		recv_len = recvfrom(UDP_SOCKET, buf, sizeof(buf), dest_ip, &dest_port);
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f103 021c 	add.w	r2, r3, #28
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3320      	adds	r3, #32
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	4613      	mov	r3, r2
 8000852:	220c      	movs	r2, #12
 8000854:	2001      	movs	r0, #1
 8000856:	f001 f8a1 	bl	800199c <recvfrom_W5x00>
 800085a:	4603      	mov	r3, r0
 800085c:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <_ZN13BarelangW550010udpReceiveEv+0xa4>)
 800085e:	6013      	str	r3, [r2, #0]
		if (recv_len > 0) {
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <_ZN13BarelangW550010udpReceiveEv+0xa4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	dd28      	ble.n	80008ba <_ZN13BarelangW550010udpReceiveEv+0x9e>
			memcpy(&dataPC, buf, sizeof(buf));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	220c      	movs	r2, #12
 800086c:	4619      	mov	r1, r3
 800086e:	4815      	ldr	r0, [pc, #84]	; (80008c4 <_ZN13BarelangW550010udpReceiveEv+0xa8>)
 8000870:	f004 ffa8 	bl	80057c4 <memcpy>
			buf[recv_len] = '\0';  // Null-terminate the received string
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <_ZN13BarelangW550010udpReceiveEv+0xa4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	2100      	movs	r1, #0
 800087c:	54d1      	strb	r1, [r2, r3]
			dataReceived = 1;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2201      	movs	r2, #1
 8000882:	735a      	strb	r2, [r3, #13]
 8000884:	e019      	b.n	80008ba <_ZN13BarelangW550010udpReceiveEv+0x9e>
		}
	}
	else{
		dataReceived = 0;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	735a      	strb	r2, [r3, #13]
		dataPC.DKanan = 0;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <_ZN13BarelangW550010udpReceiveEv+0xa8>)
 800088e:	2200      	movs	r2, #0
 8000890:	811a      	strh	r2, [r3, #8]
		dataPC.DKiri = 0;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <_ZN13BarelangW550010udpReceiveEv+0xa8>)
 8000894:	2200      	movs	r2, #0
 8000896:	80da      	strh	r2, [r3, #6]
		dataPC.MBelakang = 0;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <_ZN13BarelangW550010udpReceiveEv+0xa8>)
 800089a:	2200      	movs	r2, #0
 800089c:	809a      	strh	r2, [r3, #4]
		dataPC.MKiri = 0;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <_ZN13BarelangW550010udpReceiveEv+0xa8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	801a      	strh	r2, [r3, #0]
		dataPC.MKanan = 0;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <_ZN13BarelangW550010udpReceiveEv+0xa8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	805a      	strh	r2, [r3, #2]
		dataPC.kickPower  = 0;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <_ZN13BarelangW550010udpReceiveEv+0xa8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	72da      	strb	r2, [r3, #11]
		dataPC.lifter_target = 0;
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <_ZN13BarelangW550010udpReceiveEv+0xa8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	729a      	strb	r2, [r3, #10]
 80008b6:	e000      	b.n	80008ba <_ZN13BarelangW550010udpReceiveEv+0x9e>
		return;
 80008b8:	bf00      	nop
	}
}
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000104 	.word	0x20000104
 80008c4:	200000c0 	.word	0x200000c0

080008c8 <_ZN13BarelangW55007udpSendEPKvj>:

uint8_t BarelangW5500::udpSend(const void *_buff, size_t _len) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	if (!socketCreated)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	7b1b      	ldrb	r3, [r3, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d101      	bne.n	80008e0 <_ZN13BarelangW55007udpSendEPKvj+0x18>
		return 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	e01f      	b.n	8000920 <_ZN13BarelangW55007udpSendEPKvj+0x58>

	int32_t result = sendto(UDP_SOCKET, (uint8_t* )_buff, _len, dest_ip,
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f103 011c 	add.w	r1, r3, #28
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	8c1b      	ldrh	r3, [r3, #32]
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	460b      	mov	r3, r1
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	2001      	movs	r0, #1
 80008f6:	f000 fea9 	bl	800164c <sendto_W5x00>
 80008fa:	6178      	str	r0, [r7, #20]
			dest_port);

	if (result > 0) {
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	dd06      	ble.n	8000910 <_ZN13BarelangW55007udpSendEPKvj+0x48>
		SetTick(lastSendTime);
 8000902:	f002 f995 	bl	8002c30 <HAL_GetTick>
 8000906:	4602      	mov	r2, r0
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	611a      	str	r2, [r3, #16]
		return 1; // Success
 800090c:	2301      	movs	r3, #1
 800090e:	e007      	b.n	8000920 <_ZN13BarelangW55007udpSendEPKvj+0x58>
	} else {
		// Handle send error
		if (result == SOCKERR_SOCKSTATUS) {
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	f113 0f07 	cmn.w	r3, #7
 8000916:	d102      	bne.n	800091e <_ZN13BarelangW55007udpSendEPKvj+0x56>
			// Socket not in proper state, try to reconnect
			socketCreated = 0;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2200      	movs	r2, #0
 800091c:	731a      	strb	r2, [r3, #12]
		}
		return 0; // Failed
 800091e:	2300      	movs	r3, #0
	}
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f002 f919 	bl	8002b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f81f 	bl	8000974 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 fb15 	bl	8000f64 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 800093a:	f000 f983 	bl	8000c44 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800093e:	f000 fa4b 	bl	8000dd8 <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8000942:	f000 fae1 	bl	8000f08 <_ZL13MX_UART4_Initv>
  MX_ADC1_Init();
 8000946:	f000 f889 	bl	8000a5c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 800094a:	f000 f8e3 	bl	8000b14 <_ZL12MX_ADC2_Initv>
  MX_SPI1_Init();
 800094e:	f000 f93d 	bl	8000bcc <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  BarelangMain mainLoop;
 8000952:	463b      	mov	r3, r7
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fdb3 	bl	80004c0 <_ZN12BarelangMainC1Ev>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainLoop.Loop();
 800095a:	463b      	mov	r3, r7
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fdc3 	bl	80004e8 <_ZN12BarelangMain4LoopEv>
	  tickLoop = HAL_GetTick();
 8000962:	f002 f965 	bl	8002c30 <HAL_GetTick>
 8000966:	4603      	mov	r3, r0
 8000968:	4a01      	ldr	r2, [pc, #4]	; (8000970 <main+0x48>)
 800096a:	6013      	str	r3, [r2, #0]
	  mainLoop.Loop();
 800096c:	e7f5      	b.n	800095a <main+0x32>
 800096e:	bf00      	nop
 8000970:	20000108 	.word	0x20000108

08000974 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f004 ff2c 	bl	80057e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <_Z18SystemClock_Configv+0xe0>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <_Z18SystemClock_Configv+0xe0>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <_Z18SystemClock_Configv+0xe0>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <_Z18SystemClock_Configv+0xe4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <_Z18SystemClock_Configv+0xe4>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <_Z18SystemClock_Configv+0xe4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009e4:	2308      	movs	r3, #8
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009e8:	23a8      	movs	r3, #168	; 0xa8
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009f0:	2307      	movs	r3, #7
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fe23 	bl	8003644 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bf14      	ite	ne
 8000a04:	2301      	movne	r3, #1
 8000a06:	2300      	moveq	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000a0e:	f000 fc73 	bl	80012f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a12:	230f      	movs	r3, #15
 8000a14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a16:	2302      	movs	r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 f87f 	bl	8003b34 <HAL_RCC_ClockConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000a46:	f000 fc57 	bl	80012f8 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3750      	adds	r7, #80	; 0x50
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40007000 	.word	0x40007000

08000a5c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <_ZL12MX_ADC1_Initv+0xb0>)
 8000a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <_ZL12MX_ADC1_Initv+0xb4>)
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000abc:	4812      	ldr	r0, [pc, #72]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000abe:	f002 f8c3 	bl	8002c48 <HAL_ADC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf14      	ite	ne
 8000ac8:	2301      	movne	r3, #1
 8000aca:	2300      	moveq	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000ad2:	f000 fc11 	bl	80012f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <_ZL12MX_ADC1_Initv+0xac>)
 8000ae8:	f002 f8f2 	bl	8002cd0 <HAL_ADC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000afc:	f000 fbfc 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000010c 	.word	0x2000010c
 8000b0c:	40012000 	.word	0x40012000
 8000b10:	0f000001 	.word	0x0f000001

08000b14 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b28:	4a26      	ldr	r2, [pc, #152]	; (8000bc4 <_ZL12MX_ADC2_Initv+0xb0>)
 8000b2a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b32:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <_ZL12MX_ADC2_Initv+0xb4>)
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000b76:	f002 f867 	bl	8002c48 <HAL_ADC_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	bf14      	ite	ne
 8000b80:	2301      	movne	r3, #1
 8000b82:	2300      	moveq	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 8000b8a:	f000 fbb5 	bl	80012f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <_ZL12MX_ADC2_Initv+0xac>)
 8000ba0:	f002 f896 	bl	8002cd0 <HAL_ADC_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	bf14      	ite	ne
 8000baa:	2301      	movne	r3, #1
 8000bac:	2300      	moveq	r3, #0
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 8000bb4:	f000 fba0 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000154 	.word	0x20000154
 8000bc4:	40012100 	.word	0x40012100
 8000bc8:	0f000001 	.word	0x0f000001

08000bcc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000bd2:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <_ZL12MX_SPI1_Initv+0x74>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000bd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000c00:	2210      	movs	r2, #16
 8000c02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000c18:	220a      	movs	r2, #10
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <_ZL12MX_SPI1_Initv+0x70>)
 8000c1e:	f003 f985 	bl	8003f2c <HAL_SPI_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	bf14      	ite	ne
 8000c28:	2301      	movne	r3, #1
 8000c2a:	2300      	moveq	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000c32:	f000 fb61 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000019c 	.word	0x2000019c
 8000c40:	40013000 	.word	0x40013000

08000c44 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b092      	sub	sp, #72	; 0x48
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 fdb6 	bl	80057e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c74:	4b56      	ldr	r3, [pc, #344]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000c76:	4a57      	ldr	r2, [pc, #348]	; (8000dd4 <_ZL12MX_TIM1_Initv+0x190>)
 8000c78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c7a:	4b55      	ldr	r3, [pc, #340]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b53      	ldr	r3, [pc, #332]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c86:	4b52      	ldr	r3, [pc, #328]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b50      	ldr	r3, [pc, #320]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c94:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b4d      	ldr	r3, [pc, #308]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ca0:	484b      	ldr	r0, [pc, #300]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000ca2:	f003 feeb 	bl	8004a7c <HAL_TIM_PWM_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8000cb6:	f000 fb1f 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4841      	ldr	r0, [pc, #260]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000cca:	f004 fa43 	bl	8005154 <HAL_TIMEx_MasterConfigSynchronization>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bf14      	ite	ne
 8000cd4:	2301      	movne	r3, #1
 8000cd6:	2300      	moveq	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000cde:	f000 fb0b 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce2:	2360      	movs	r3, #96	; 0x60
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	2200      	movs	r2, #0
 8000d04:	4619      	mov	r1, r3
 8000d06:	4832      	ldr	r0, [pc, #200]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000d08:	f003 ff12 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000d1c:	f000 faec 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	2204      	movs	r2, #4
 8000d26:	4619      	mov	r1, r3
 8000d28:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000d2a:	f003 ff01 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	bf14      	ite	ne
 8000d34:	2301      	movne	r3, #1
 8000d36:	2300      	moveq	r3, #0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8000d3e:	f000 fadb 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	2208      	movs	r2, #8
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000d4c:	f003 fef0 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf14      	ite	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	2300      	moveq	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8000d60:	f000 faca 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	220c      	movs	r2, #12
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000d6e:	f003 fedf 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bf14      	ite	ne
 8000d78:	2301      	movne	r3, #1
 8000d7a:	2300      	moveq	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8000d82:	f000 fab9 	bl	80012f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000daa:	f004 fa4f 	bl	800524c <HAL_TIMEx_ConfigBreakDeadTime>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bf14      	ite	ne
 8000db4:	2301      	movne	r3, #1
 8000db6:	2300      	moveq	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8000dbe:	f000 fa9b 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <_ZL12MX_TIM1_Initv+0x18c>)
 8000dc4:	f001 f8ec 	bl	8001fa0 <HAL_TIM_MspPostInit>

}
 8000dc8:	bf00      	nop
 8000dca:	3748      	adds	r7, #72	; 0x48
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200001f4 	.word	0x200001f4
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000dfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e02:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e22:	4838      	ldr	r0, [pc, #224]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000e24:	f003 fe2a 	bl	8004a7c <HAL_TIM_PWM_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf14      	ite	ne
 8000e2e:	2301      	movne	r3, #1
 8000e30:	2300      	moveq	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8000e38:	f000 fa5e 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e44:	f107 0320 	add.w	r3, r7, #32
 8000e48:	4619      	mov	r1, r3
 8000e4a:	482e      	ldr	r0, [pc, #184]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000e4c:	f004 f982 	bl	8005154 <HAL_TIMEx_MasterConfigSynchronization>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bf14      	ite	ne
 8000e56:	2301      	movne	r3, #1
 8000e58:	2300      	moveq	r3, #0
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8000e60:	f000 fa4a 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e64:	2360      	movs	r3, #96	; 0x60
 8000e66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4822      	ldr	r0, [pc, #136]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000e7c:	f003 fe58 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bf14      	ite	ne
 8000e86:	2301      	movne	r3, #1
 8000e88:	2300      	moveq	r3, #0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8000e90:	f000 fa32 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2204      	movs	r2, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481a      	ldr	r0, [pc, #104]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000e9c:	f003 fe48 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bf14      	ite	ne
 8000ea6:	2301      	movne	r3, #1
 8000ea8:	2300      	moveq	r3, #0
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8000eb0:	f000 fa22 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4812      	ldr	r0, [pc, #72]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000ebc:	f003 fe38 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bf14      	ite	ne
 8000ec6:	2301      	movne	r3, #1
 8000ec8:	2300      	moveq	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <_ZL12MX_TIM2_Initv+0xfc>
  {
    Error_Handler();
 8000ed0:	f000 fa12 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480a      	ldr	r0, [pc, #40]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000edc:	f003 fe28 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bf14      	ite	ne
 8000ee6:	2301      	movne	r3, #1
 8000ee8:	2300      	moveq	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <_ZL12MX_TIM2_Initv+0x11c>
  {
    Error_Handler();
 8000ef0:	f000 fa02 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <_ZL12MX_TIM2_Initv+0x12c>)
 8000ef6:	f001 f853 	bl	8001fa0 <HAL_TIM_MspPostInit>

}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000023c 	.word	0x2000023c

08000f08 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_ZL13MX_UART4_Initv+0x54>)
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_ZL13MX_UART4_Initv+0x58>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <_ZL13MX_UART4_Initv+0x54>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_ZL13MX_UART4_Initv+0x54>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <_ZL13MX_UART4_Initv+0x54>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <_ZL13MX_UART4_Initv+0x54>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <_ZL13MX_UART4_Initv+0x54>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <_ZL13MX_UART4_Initv+0x54>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_ZL13MX_UART4_Initv+0x54>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <_ZL13MX_UART4_Initv+0x54>)
 8000f40:	f004 f9d6 	bl	80052f0 <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bf14      	ite	ne
 8000f4a:	2301      	movne	r3, #1
 8000f4c:	2300      	moveq	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8000f54:	f000 f9d0 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000284 	.word	0x20000284
 8000f60:	40004c00 	.word	0x40004c00

08000f64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	4bb7      	ldr	r3, [pc, #732]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4ab6      	ldr	r2, [pc, #728]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4bb4      	ldr	r3, [pc, #720]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	4bb0      	ldr	r3, [pc, #704]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4aaf      	ldr	r2, [pc, #700]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4bad      	ldr	r3, [pc, #692]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4ba9      	ldr	r3, [pc, #676]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4aa8      	ldr	r2, [pc, #672]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4ba6      	ldr	r3, [pc, #664]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4ba2      	ldr	r3, [pc, #648]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4aa1      	ldr	r2, [pc, #644]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b9f      	ldr	r3, [pc, #636]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b9b      	ldr	r3, [pc, #620]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a9a      	ldr	r2, [pc, #616]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b98      	ldr	r3, [pc, #608]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b94      	ldr	r3, [pc, #592]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a93      	ldr	r2, [pc, #588]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b91      	ldr	r3, [pc, #580]	; (800125c <_ZL12MX_GPIO_Initv+0x2f8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|Discharge_Pin|Charge_Pin|CCW5_Pin
 8001022:	2200      	movs	r2, #0
 8001024:	f240 510b 	movw	r1, #1291	; 0x50b
 8001028:	488d      	ldr	r0, [pc, #564]	; (8001260 <_ZL12MX_GPIO_Initv+0x2fc>)
 800102a:	f002 faf1 	bl	8003610 <HAL_GPIO_WritePin>
                          |CW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	2101      	movs	r1, #1
 8001032:	488c      	ldr	r0, [pc, #560]	; (8001264 <_ZL12MX_GPIO_Initv+0x300>)
 8001034:	f002 faec 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CCW3_Pin|CW3_Pin|CCW4_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	21e0      	movs	r1, #224	; 0xe0
 800103c:	488a      	ldr	r0, [pc, #552]	; (8001268 <_ZL12MX_GPIO_Initv+0x304>)
 800103e:	f002 fae7 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, W5500_CS_Pin|CW4_Pin|CCW6_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2170      	movs	r1, #112	; 0x70
 8001046:	4887      	ldr	r0, [pc, #540]	; (8001264 <_ZL12MX_GPIO_Initv+0x300>)
 8001048:	f002 fae2 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CCW1_Pin|CW1_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001052:	4886      	ldr	r0, [pc, #536]	; (800126c <_ZL12MX_GPIO_Initv+0x308>)
 8001054:	f002 fadc 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CCW2_Pin|CW2_Pin|CW6_Pin|LD4_Pin
 8001058:	2200      	movs	r2, #0
 800105a:	f64f 6192 	movw	r1, #65170	; 0xfe92
 800105e:	4884      	ldr	r0, [pc, #528]	; (8001270 <_ZL12MX_GPIO_Initv+0x30c>)
 8001060:	f002 fad6 	bl	8003610 <HAL_GPIO_WritePin>
                          |LD3_Pin|LD5_Pin|LD6_Pin|CCW_7_Pin
                          |Audio_RST_Pin|CW7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 Discharge_Pin Charge_Pin CCW5_Pin
                           CW5_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|Discharge_Pin|Charge_Pin|CCW5_Pin
 8001064:	f240 530b 	movw	r3, #1291	; 0x50b
 8001068:	61fb      	str	r3, [r7, #28]
                          |CW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	4878      	ldr	r0, [pc, #480]	; (8001260 <_ZL12MX_GPIO_Initv+0x2fc>)
 800107e:	f002 f92b 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_BAWAH_Pin LS_ATAS_Pin ENC2B_Pin ENC6B_Pin
                           Full_Pin */
  GPIO_InitStruct.Pin = LS_BAWAH_Pin|LS_ATAS_Pin|ENC2B_Pin|ENC6B_Pin
 8001082:	f249 03d0 	movw	r3, #37072	; 0x90d0
 8001086:	61fb      	str	r3, [r7, #28]
                          |Full_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	4872      	ldr	r0, [pc, #456]	; (8001260 <_ZL12MX_GPIO_Initv+0x2fc>)
 8001098:	f002 f91e 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2A_Pin */
  GPIO_InitStruct.Pin = ENC2A_Pin;
 800109c:	2320      	movs	r3, #32
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC2A_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	486b      	ldr	r0, [pc, #428]	; (8001260 <_ZL12MX_GPIO_Initv+0x2fc>)
 80010b2:	f002 f911 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proxy_Pin_Pin ENC1B_Pin ENC3B_Pin ENC7B_Pin
                           ENC4B_Pin */
  GPIO_InitStruct.Pin = Proxy_Pin_Pin|ENC1B_Pin|ENC3B_Pin|ENC7B_Pin
 80010b6:	f243 1382 	movw	r3, #12674	; 0x3182
 80010ba:	61fb      	str	r3, [r7, #28]
                          |ENC4B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4866      	ldr	r0, [pc, #408]	; (8001264 <_ZL12MX_GPIO_Initv+0x300>)
 80010cc:	f002 f904 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin W5500_CS_Pin CW4_Pin CCW6_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|W5500_CS_Pin|CW4_Pin|CCW6_Pin;
 80010d0:	2371      	movs	r3, #113	; 0x71
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	485f      	ldr	r0, [pc, #380]	; (8001264 <_ZL12MX_GPIO_Initv+0x300>)
 80010e8:	f002 f8f6 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010ec:	2308      	movs	r3, #8
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010fc:	2305      	movs	r3, #5
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	4857      	ldr	r0, [pc, #348]	; (8001264 <_ZL12MX_GPIO_Initv+0x300>)
 8001108:	f002 f8e6 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CCW3_Pin CW3_Pin CCW4_Pin */
  GPIO_InitStruct.Pin = CCW3_Pin|CW3_Pin|CCW4_Pin;
 800110c:	23e0      	movs	r3, #224	; 0xe0
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4851      	ldr	r0, [pc, #324]	; (8001268 <_ZL12MX_GPIO_Initv+0x304>)
 8001124:	f002 f8d8 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_Kick_Pin */
  GPIO_InitStruct.Pin = PWM_Kick_Pin;
 8001128:	2301      	movs	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001138:	2302      	movs	r3, #2
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PWM_Kick_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	484a      	ldr	r0, [pc, #296]	; (800126c <_ZL12MX_GPIO_Initv+0x308>)
 8001144:	f002 f8c8 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC6A_Pin */
  GPIO_InitStruct.Pin = ENC6A_Pin;
 8001148:	2302      	movs	r3, #2
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4843      	ldr	r0, [pc, #268]	; (800126c <_ZL12MX_GPIO_Initv+0x308>)
 800115e:	f002 f8bb 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001162:	2304      	movs	r3, #4
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	483d      	ldr	r0, [pc, #244]	; (800126c <_ZL12MX_GPIO_Initv+0x308>)
 8001176:	f002 f8af 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800117a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800118c:	2305      	movs	r3, #5
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	4835      	ldr	r0, [pc, #212]	; (800126c <_ZL12MX_GPIO_Initv+0x308>)
 8001198:	f002 f89e 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CCW1_Pin CW1_Pin */
  GPIO_InitStruct.Pin = CCW1_Pin|CW1_Pin;
 800119c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	482d      	ldr	r0, [pc, #180]	; (800126c <_ZL12MX_GPIO_Initv+0x308>)
 80011b6:	f002 f88f 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_RST_Pin OTG_FS_OverCurrent_Pin ENC5B_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin|OTG_FS_OverCurrent_Pin|ENC5B_Pin;
 80011ba:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4828      	ldr	r0, [pc, #160]	; (8001270 <_ZL12MX_GPIO_Initv+0x30c>)
 80011d0:	f002 f882 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CCW2_Pin CW2_Pin CW6_Pin LD4_Pin
                           LD3_Pin LD5_Pin LD6_Pin CCW_7_Pin
                           Audio_RST_Pin CW7_Pin */
  GPIO_InitStruct.Pin = CCW2_Pin|CW2_Pin|CW6_Pin|LD4_Pin
 80011d4:	f64f 6392 	movw	r3, #65170	; 0xfe92
 80011d8:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|LD5_Pin|LD6_Pin|CCW_7_Pin
                          |Audio_RST_Pin|CW7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4820      	ldr	r0, [pc, #128]	; (8001270 <_ZL12MX_GPIO_Initv+0x30c>)
 80011ee:	f002 f873 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC8A_Pin */
  GPIO_InitStruct.Pin = ENC8A_Pin;
 80011f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC8A_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4817      	ldr	r0, [pc, #92]	; (8001268 <_ZL12MX_GPIO_Initv+0x304>)
 800120a:	f002 f865 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800120e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <_ZL12MX_GPIO_Initv+0x304>)
 8001224:	f002 f858 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001228:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800123a:	230a      	movs	r3, #10
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <_ZL12MX_GPIO_Initv+0x304>)
 8001246:	f002 f847 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 800124a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
 8001258:	e00c      	b.n	8001274 <_ZL12MX_GPIO_Initv+0x310>
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40021000 	.word	0x40021000
 8001264:	40020800 	.word	0x40020800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001278:	2306      	movs	r3, #6
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	481a      	ldr	r0, [pc, #104]	; (80012ec <_ZL12MX_GPIO_Initv+0x388>)
 8001284:	f002 f828 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC5A_Pin ENC7A_Pin ENC4A_Pin */
  GPIO_InitStruct.Pin = ENC5A_Pin|ENC7A_Pin|ENC4A_Pin;
 8001288:	230d      	movs	r3, #13
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4814      	ldr	r0, [pc, #80]	; (80012f0 <_ZL12MX_GPIO_Initv+0x38c>)
 800129e:	f002 f81b 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX1_Pin RX1_Pin */
  GPIO_InitStruct.Pin = TX1_Pin|RX1_Pin;
 80012a2:	23c0      	movs	r3, #192	; 0xc0
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b2:	2307      	movs	r3, #7
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <_ZL12MX_GPIO_Initv+0x390>)
 80012be:	f002 f80b 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c8:	2312      	movs	r3, #18
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d4:	2304      	movs	r3, #4
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <_ZL12MX_GPIO_Initv+0x390>)
 80012e0:	f001 fffa 	bl	80032d8 <HAL_GPIO_Init>

}
 80012e4:	bf00      	nop
 80012e6:	3730      	adds	r7, #48	; 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	40020400 	.word	0x40020400

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	4604      	mov	r4, r0
 800130c:	4608      	mov	r0, r1
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4623      	mov	r3, r4
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	4603      	mov	r3, r0
 8001318:	71bb      	strb	r3, [r7, #6]
 800131a:	460b      	mov	r3, r1
 800131c:	80bb      	strh	r3, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 8001322:	2300      	movs	r3, #0
 8001324:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b07      	cmp	r3, #7
 800132a:	d902      	bls.n	8001332 <socket+0x2e>
 800132c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001330:	e110      	b.n	8001554 <socket+0x250>
   switch (protocol & 0x0F)
 8001332:	79bb      	ldrb	r3, [r7, #6]
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	3b01      	subs	r3, #1
 800133a:	2b0d      	cmp	r3, #13
 800133c:	d82c      	bhi.n	8001398 <socket+0x94>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <socket+0x40>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	0800137d 	.word	0x0800137d
 8001348:	0800139f 	.word	0x0800139f
 800134c:	0800139f 	.word	0x0800139f
 8001350:	0800139f 	.word	0x0800139f
 8001354:	08001399 	.word	0x08001399
 8001358:	08001399 	.word	0x08001399
 800135c:	08001399 	.word	0x08001399
 8001360:	08001399 	.word	0x08001399
 8001364:	08001399 	.word	0x08001399
 8001368:	0800139f 	.word	0x0800139f
 800136c:	0800139f 	.word	0x0800139f
 8001370:	08001399 	.word	0x08001399
 8001374:	08001399 	.word	0x08001399
 8001378:	0800139f 	.word	0x0800139f
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	2204      	movs	r2, #4
 8001382:	4619      	mov	r1, r3
 8001384:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001388:	f001 f822 	bl	80023d0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d107      	bne.n	80013a2 <socket+0x9e>
 8001392:	f06f 0302 	mvn.w	r3, #2
 8001396:	e0dd      	b.n	8001554 <socket+0x250>
      #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
      #endif
      default :
        return SOCKERR_SOCKMODE;
 8001398:	f06f 0304 	mvn.w	r3, #4
 800139c:	e0da      	b.n	8001554 <socket+0x250>
         break; 
 800139e:	bf00      	nop
 80013a0:	e000      	b.n	80013a4 <socket+0xa0>
            break;
 80013a2:	bf00      	nop
   } 
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <socket+0xb0>
 80013ae:	f06f 0305 	mvn.w	r3, #5
 80013b2:	e0cf      	b.n	8001554 <socket+0x250>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
   if(flag != 0)
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d025      	beq.n	8001406 <socket+0x102>
   {
      switch(protocol)
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d002      	beq.n	80013c6 <socket+0xc2>
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d008      	beq.n	80013d6 <socket+0xd2>
         break;

#endif 

         default:
            break;
 80013c4:	e024      	b.n	8001410 <socket+0x10c>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d11c      	bne.n	800140a <socket+0x106>
 80013d0:	f06f 0305 	mvn.w	r3, #5
 80013d4:	e0be      	b.n	8001554 <socket+0x250>
   	      if(flag & SF_IGMP_VER2)
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80013e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db02      	blt.n	80013ee <socket+0xea>
 80013e8:	f06f 0305 	mvn.w	r3, #5
 80013ec:	e0b2      	b.n	8001554 <socket+0x250>
      	      if(flag & SF_UNI_BLOCK)
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00a      	beq.n	800140e <socket+0x10a>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80013f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db06      	blt.n	800140e <socket+0x10a>
 8001400:	f06f 0305 	mvn.w	r3, #5
 8001404:	e0a6      	b.n	8001554 <socket+0x250>
      }
   }
 8001406:	bf00      	nop
 8001408:	e002      	b.n	8001410 <socket+0x10c>
   	      break;
 800140a:	bf00      	nop
 800140c:	e000      	b.n	8001410 <socket+0x10c>
         break;
 800140e:	bf00      	nop
   close(sn);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f8ac 	bl	8001570 <close>
	//M20150601
#if _WIZCHIP_ == 5300   
   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
#else
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	3301      	adds	r3, #1
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4618      	mov	r0, r3
 8001422:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001426:	f023 030f 	bic.w	r3, r3, #15
 800142a:	b25a      	sxtb	r2, r3
 800142c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001430:	4313      	orrs	r3, r2
 8001432:	b25b      	sxtb	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	f000 ff7c 	bl	8002334 <WIZCHIP_WRITE>
#endif
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 800143c:	88bb      	ldrh	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d110      	bne.n	8001464 <socket+0x160>
   {
      port = sock_any_port++;
 8001442:	4b46      	ldr	r3, [pc, #280]	; (800155c <socket+0x258>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	b291      	uxth	r1, r2
 800144a:	4a44      	ldr	r2, [pc, #272]	; (800155c <socket+0x258>)
 800144c:	8011      	strh	r1, [r2, #0]
 800144e:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001450:	4b42      	ldr	r3, [pc, #264]	; (800155c <socket+0x258>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001458:	4293      	cmp	r3, r2
 800145a:	d103      	bne.n	8001464 <socket+0x160>
 800145c:	4b3f      	ldr	r3, [pc, #252]	; (800155c <socket+0x258>)
 800145e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001462:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	3301      	adds	r3, #1
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001470:	461a      	mov	r2, r3
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	b29b      	uxth	r3, r3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4619      	mov	r1, r3
 800147c:	4610      	mov	r0, r2
 800147e:	f000 ff59 	bl	8002334 <WIZCHIP_WRITE>
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	3301      	adds	r3, #1
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800148e:	461a      	mov	r2, r3
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4619      	mov	r1, r3
 8001496:	4610      	mov	r0, r2
 8001498:	f000 ff4c 	bl	8002334 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	3301      	adds	r3, #1
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014a8:	2101      	movs	r1, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 ff42 	bl	8002334 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80014b0:	bf00      	nop
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	3301      	adds	r3, #1
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 feec 	bl	800229c <WIZCHIP_READ>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f3      	bne.n	80014b2 <socket+0x1ae>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2201      	movs	r2, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <socket+0x25c>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4013      	ands	r3, r2
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <socket+0x25c>)
 80014e6:	801a      	strh	r2, [r3, #0]
   //
#ifndef IPV6_AVAILABLE
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	f003 0201 	and.w	r2, r3, #1
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <socket+0x25c>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b21b      	sxth	r3, r3
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <socket+0x25c>)
 8001504:	801a      	strh	r2, [r3, #0]
#else
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
#endif
   sock_is_sending &= ~(1<<sn);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2201      	movs	r2, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	b21b      	sxth	r3, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <socket+0x260>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	b21b      	sxth	r3, r3
 800151a:	4013      	ands	r3, r2
 800151c:	b21b      	sxth	r3, r3
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <socket+0x260>)
 8001522:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <socket+0x264>)
 8001528:	2100      	movs	r1, #0
 800152a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <socket+0x268>)
 8001532:	2100      	movs	r1, #0
 8001534:	54d1      	strb	r1, [r2, r3]
  //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001536:	bf00      	nop
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	3301      	adds	r3, #1
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fea9 	bl	800229c <WIZCHIP_READ>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f3      	beq.n	8001538 <socket+0x234>
   return (int8_t)sn;
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8001554:	4618      	mov	r0, r3
 8001556:	3724      	adds	r7, #36	; 0x24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd90      	pop	{r4, r7, pc}
 800155c:	20000000 	.word	0x20000000
 8001560:	200002c8 	.word	0x200002c8
 8001564:	200002ca 	.word	0x200002ca
 8001568:	200002cc 	.word	0x200002cc
 800156c:	200002dc 	.word	0x200002dc

08001570 <close>:

int8_t close(uint8_t sn)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b07      	cmp	r3, #7
 800157e:	d902      	bls.n	8001586 <close+0x16>
 8001580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001584:	e055      	b.n	8001632 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	3301      	adds	r3, #1
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001592:	2110      	movs	r1, #16
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fecd 	bl	8002334 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 800159a:	bf00      	nop
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	3301      	adds	r3, #1
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fe77 	bl	800229c <WIZCHIP_READ>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f3      	bne.n	800159c <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	3301      	adds	r3, #1
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015c0:	211f      	movs	r1, #31
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 feb6 	bl	8002334 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2201      	movs	r2, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <close+0xcc>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4013      	ands	r3, r2
 80015de:	b21b      	sxth	r3, r3
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <close+0xcc>)
 80015e4:	801a      	strh	r2, [r3, #0]
	//
   sock_is_sending &= ~(1<<sn);
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2201      	movs	r2, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <close+0xd0>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4013      	ands	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <close+0xd0>)
 8001602:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4a0f      	ldr	r2, [pc, #60]	; (8001644 <close+0xd4>)
 8001608:	2100      	movs	r1, #0
 800160a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <close+0xd8>)
 8001612:	2100      	movs	r1, #0
 8001614:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8001616:	bf00      	nop
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	3301      	adds	r3, #1
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fe39 	bl	800229c <WIZCHIP_READ>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f3      	bne.n	8001618 <close+0xa8>
   return SOCK_OK;
 8001630:	2301      	movs	r3, #1
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002c8 	.word	0x200002c8
 8001640:	200002ca 	.word	0x200002ca
 8001644:	200002cc 	.word	0x200002cc
 8001648:	200002dc 	.word	0x200002dc

0800164c <sendto_W5x00>:
   //return len;
   return (int32_t)len;
}


int32_t sendto_W5x00(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port ){
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af02      	add	r7, sp, #8
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	4613      	mov	r3, r2
 800165c:	81bb      	strh	r3, [r7, #12]
   //static int32_t sendto_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
   // printf("sendto_W5x00\r\n" ) ;
   return sendto_IO_6(sn,   buf,  len,   addr,  port,4);
 800165e:	89ba      	ldrh	r2, [r7, #12]
 8001660:	7bf8      	ldrb	r0, [r7, #15]
 8001662:	2304      	movs	r3, #4
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	8b3b      	ldrh	r3, [r7, #24]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	f000 f805 	bl	800167c <sendto_IO_6>
 8001672:	4603      	mov	r3, r0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <sendto_IO_6>:
   //static int32_t sendto_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
   return sendto_IO_6( sn,  buf,  len,   addr,  port, addrlen);
}

static int32_t sendto_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port, uint8_t addrlen)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4603      	mov	r3, r0
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	4613      	mov	r3, r2
 800168c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
   uint8_t tcmd = Sn_CR_SEND;
 8001692:	2320      	movs	r3, #32
 8001694:	75bb      	strb	r3, [r7, #22]
   uint16_t freesize = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   /* 
    * The below codes can be omitted for optmization of speed
    */
   CHECK_SOCKNUM();
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b07      	cmp	r3, #7
 800169e:	d902      	bls.n	80016a6 <sendto_IO_6+0x2a>
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a4:	e174      	b.n	8001990 <sendto_IO_6+0x314>
   //CHECK_DGRAMMODE();
   /************/
   switch(getSn_MR(sn) & 0x0F)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	3301      	adds	r3, #1
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fdf4 	bl	800229c <WIZCHIP_READ>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b02      	subs	r3, #2
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d902      	bls.n	80016c6 <sendto_IO_6+0x4a>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80016c0:	f06f 0304 	mvn.w	r3, #4
 80016c4:	e164      	b.n	8001990 <sendto_IO_6+0x314>
         break;
 80016c6:	bf00      	nop
   }
   tmp = getSn_MR(sn);
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	3301      	adds	r3, #1
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fde3 	bl	800229c <WIZCHIP_READ>
 80016d6:	4603      	mov	r3, r0
 80016d8:	75fb      	strb	r3, [r7, #23]
   if(tmp != Sn_MR_MACRAW)
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d024      	beq.n	800172a <sendto_IO_6+0xae>
   {
       if (addrlen == 16)      // addrlen=16, Sn_MR_UDP6(1010), Sn_MR_UDPD(1110)), IPRAW6(1011)
 80016e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016e4:	2b10      	cmp	r3, #16
 80016e6:	d102      	bne.n	80016ee <sendto_IO_6+0x72>
            setSn_DIP6R(sn,addr);
            tcmd = Sn_CR_SEND6;
         }
         else
#endif 
         return SOCKERR_SOCKMODE;
 80016e8:	f06f 0304 	mvn.w	r3, #4
 80016ec:	e150      	b.n	8001990 <sendto_IO_6+0x314>
      } 
      else if(addrlen == 4)      // addrlen=4, Sn_MR_UDP4(0010), Sn_MR_UDPD(1110), IPRAW4(0011)
 80016ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d116      	bne.n	8001724 <sendto_IO_6+0xa8>
      {
         if(tmp == Sn_MR_UDP6 || tmp == Sn_MR_IPRAW6) return SOCKERR_SOCKMODE;
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b0a      	cmp	r3, #10
 80016fa:	d002      	beq.n	8001702 <sendto_IO_6+0x86>
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b0b      	cmp	r3, #11
 8001700:	d102      	bne.n	8001708 <sendto_IO_6+0x8c>
 8001702:	f06f 0304 	mvn.w	r3, #4
 8001706:	e143      	b.n	8001990 <sendto_IO_6+0x314>
         setSn_DIPR(sn,addr);
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	3301      	adds	r3, #1
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001714:	2204      	movs	r2, #4
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 feb9 	bl	8002490 <WIZCHIP_WRITE_BUF>
         tcmd = Sn_CR_SEND;
 800171e:	2320      	movs	r3, #32
 8001720:	75bb      	strb	r3, [r7, #22]
 8001722:	e002      	b.n	800172a <sendto_IO_6+0xae>
      }
      else return SOCKERR_IPINVALID;
 8001724:	f06f 030b 	mvn.w	r3, #11
 8001728:	e132      	b.n	8001990 <sendto_IO_6+0x314>
   }
   if((tmp & 0x03)==0x02)     // Sn_MR_UPD4(0010), Sn_MR_UDP6(1010), Sn_MR_UDPD(1110)
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d122      	bne.n	800177a <sendto_IO_6+0xfe>
   {
      if(port){ setSn_DPORTR(sn, port);}
 8001734:	8c3b      	ldrh	r3, [r7, #32]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01c      	beq.n	8001774 <sendto_IO_6+0xf8>
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	3301      	adds	r3, #1
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001746:	461a      	mov	r2, r3
 8001748:	8c3b      	ldrh	r3, [r7, #32]
 800174a:	0a1b      	lsrs	r3, r3, #8
 800174c:	b29b      	uxth	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4619      	mov	r1, r3
 8001752:	4610      	mov	r0, r2
 8001754:	f000 fdee 	bl	8002334 <WIZCHIP_WRITE>
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	3301      	adds	r3, #1
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001764:	461a      	mov	r2, r3
 8001766:	8c3b      	ldrh	r3, [r7, #32]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4619      	mov	r1, r3
 800176c:	4610      	mov	r0, r2
 800176e:	f000 fde1 	bl	8002334 <WIZCHIP_WRITE>
 8001772:	e002      	b.n	800177a <sendto_IO_6+0xfe>
      else   return SOCKERR_PORTZERO;
 8001774:	f06f 030a 	mvn.w	r3, #10
 8001778:	e10a      	b.n	8001990 <sendto_IO_6+0x314>
   }
#ifndef IPV6_AVAILABLE
   CHECK_SOCKDATA();
 800177a:	89bb      	ldrh	r3, [r7, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <sendto_IO_6+0x10a>
 8001780:	f06f 030d 	mvn.w	r3, #13
 8001784:	e104      	b.n	8001990 <sendto_IO_6+0x314>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	3201      	adds	r2, #1
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	4413      	add	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	3202      	adds	r2, #2
 80017a2:	7812      	ldrb	r2, [r2, #0]
 80017a4:	4413      	add	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	3203      	adds	r2, #3
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10e      	bne.n	80017da <sendto_IO_6+0x15e>
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	3301      	adds	r3, #1
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fd69 	bl	800229c <WIZCHIP_READ>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d002      	beq.n	80017da <sendto_IO_6+0x15e>
 80017d4:	f06f 030b 	mvn.w	r3, #11
 80017d8:	e0da      	b.n	8001990 <sendto_IO_6+0x314>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80017da:	8c3b      	ldrh	r3, [r7, #32]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10e      	bne.n	80017fe <sendto_IO_6+0x182>
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	3301      	adds	r3, #1
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fd57 	bl	800229c <WIZCHIP_READ>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d002      	beq.n	80017fe <sendto_IO_6+0x182>
 80017f8:	f06f 030a 	mvn.w	r3, #10
 80017fc:	e0c8      	b.n	8001990 <sendto_IO_6+0x314>
   tmp = getSn_SR(sn);
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	3301      	adds	r3, #1
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fd46 	bl	800229c <WIZCHIP_READ>
 8001810:	4603      	mov	r3, r0
 8001812:	75fb      	strb	r3, [r7, #23]
   //#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	2b42      	cmp	r3, #66	; 0x42
 8001818:	d008      	beq.n	800182c <sendto_IO_6+0x1b0>
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	2b22      	cmp	r3, #34	; 0x22
 800181e:	d005      	beq.n	800182c <sendto_IO_6+0x1b0>
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b32      	cmp	r3, #50	; 0x32
 8001824:	d002      	beq.n	800182c <sendto_IO_6+0x1b0>
 8001826:	f06f 0306 	mvn.w	r3, #6
 800182a:	e0b1      	b.n	8001990 <sendto_IO_6+0x314>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	3301      	adds	r3, #1
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001838:	2204      	movs	r2, #4
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fe27 	bl	8002490 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);   
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	3301      	adds	r3, #1
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184e:	461a      	mov	r2, r3
 8001850:	8c3b      	ldrh	r3, [r7, #32]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	b29b      	uxth	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f000 fd6a 	bl	8002334 <WIZCHIP_WRITE>
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	3301      	adds	r3, #1
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800186c:	461a      	mov	r2, r3
 800186e:	8c3b      	ldrh	r3, [r7, #32]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4619      	mov	r1, r3
 8001874:	4610      	mov	r0, r2
 8001876:	f000 fd5d 	bl	8002334 <WIZCHIP_WRITE>
#endif 

   freesize = getSn_TxMAX(sn);
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	3301      	adds	r3, #1
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001886:	4618      	mov	r0, r3
 8001888:	f000 fd08 	bl	800229c <WIZCHIP_READ>
 800188c:	4603      	mov	r3, r0
 800188e:	b29b      	uxth	r3, r3
 8001890:	029b      	lsls	r3, r3, #10
 8001892:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001894:	89ba      	ldrh	r2, [r7, #12]
 8001896:	8abb      	ldrh	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	d901      	bls.n	80018a0 <sendto_IO_6+0x224>
 800189c:	8abb      	ldrh	r3, [r7, #20]
 800189e:	81bb      	strh	r3, [r7, #12]
  
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fe54 	bl	8002550 <getSn_TX_FSR>
 80018a8:	4603      	mov	r3, r0
 80018aa:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	3301      	adds	r3, #1
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fcef 	bl	800229c <WIZCHIP_READ>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <sendto_IO_6+0x24e>
 80018c4:	f06f 0303 	mvn.w	r3, #3
 80018c8:	e062      	b.n	8001990 <sendto_IO_6+0x314>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; 
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <sendto_IO_6+0x31c>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	fa42 f303 	asr.w	r3, r2, r3
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <sendto_IO_6+0x26e>
 80018de:	89ba      	ldrh	r2, [r7, #12]
 80018e0:	8abb      	ldrh	r3, [r7, #20]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d901      	bls.n	80018ea <sendto_IO_6+0x26e>
 80018e6:	2300      	movs	r3, #0
 80018e8:	e052      	b.n	8001990 <sendto_IO_6+0x314>
      if(len <= freesize) break;
 80018ea:	89ba      	ldrh	r2, [r7, #12]
 80018ec:	8abb      	ldrh	r3, [r7, #20]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d900      	bls.n	80018f4 <sendto_IO_6+0x278>
      freesize = getSn_TX_FSR(sn);
 80018f2:	e7d5      	b.n	80018a0 <sendto_IO_6+0x224>
      if(len <= freesize) break;
 80018f4:	bf00      	nop
   };
   wiz_send_data(sn, buf, len);
 80018f6:	89ba      	ldrh	r2, [r7, #12]
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 febd 	bl	800267c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
   setSn_CR(sn,Sn_CR_SEND);
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	3301      	adds	r3, #1
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800190e:	2120      	movs	r1, #32
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fd0f 	bl	8002334 <WIZCHIP_WRITE>
#endif 
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001916:	bf00      	nop
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	3301      	adds	r3, #1
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fcb9 	bl	800229c <WIZCHIP_READ>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f3      	bne.n	8001918 <sendto_IO_6+0x29c>
   while(1)
   {
      tmp = getSn_IR(sn);
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	3301      	adds	r3, #1
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fcad 	bl	800229c <WIZCHIP_READ>
 8001942:	4603      	mov	r3, r0
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00c      	beq.n	800196e <sendto_IO_6+0x2f2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	3301      	adds	r3, #1
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001960:	2110      	movs	r1, #16
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fce6 	bl	8002334 <WIZCHIP_WRITE>
         break;
 8001968:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800196a:	89bb      	ldrh	r3, [r7, #12]
 800196c:	e010      	b.n	8001990 <sendto_IO_6+0x314>
      else if(tmp & Sn_IR_TIMEOUT)
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0db      	beq.n	8001930 <sendto_IO_6+0x2b4>
         setSn_IR(sn, Sn_IR_TIMEOUT);   
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	3301      	adds	r3, #1
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001984:	2108      	movs	r1, #8
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fcd4 	bl	8002334 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800198c:	f06f 030c 	mvn.w	r3, #12
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200002c8 	.word	0x200002c8

0800199c <recvfrom_W5x00>:



int32_t recvfrom_W5x00(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port){
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4603      	mov	r3, r0
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	4613      	mov	r3, r2
 80019ac:	81bb      	strh	r3, [r7, #12]
   //int32_t recvfrom_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
   // printf("recvfrom_W5x00\r\n" ) ;
   uint8_t *dummy ; 
   return recvfrom_IO_6(sn,   buf,  len,   addr,  port, dummy);
 80019ae:	89ba      	ldrh	r2, [r7, #12]
 80019b0:	7bf8      	ldrb	r0, [r7, #15]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	f000 f805 	bl	80019cc <recvfrom_IO_6>
 80019c2:	4603      	mov	r3, r0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <recvfrom_IO_6>:
   // printf("recvfrom_W6x00\r\n" ) ;
   //int32_t recvfrom_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
   return recvfrom_IO_6( sn,  buf,  len,   addr,  port, addrlen);
}
static int32_t recvfrom_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port, uint8_t *addrlen) //TODO : WILL BE IMPROVED
{ 
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	4613      	mov	r3, r2
 80019dc:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
   uint16_t pack_len=0;
 80019de:	2300      	movs	r3, #0
 80019e0:	83fb      	strh	r3, [r7, #30]

   /* 
    * The below codes can be omitted for optmization of speed
    */
   CHECK_SOCKNUM();
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b07      	cmp	r3, #7
 80019e6:	d902      	bls.n	80019ee <recvfrom_IO_6+0x22>
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ec:	e1ea      	b.n	8001dc4 <recvfrom_IO_6+0x3f8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	3301      	adds	r3, #1
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fc50 	bl	800229c <WIZCHIP_READ>
 80019fc:	4603      	mov	r3, r0
 80019fe:	777b      	strb	r3, [r7, #29]
 8001a00:	7f7b      	ldrb	r3, [r7, #29]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b02      	subs	r3, #2
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d902      	bls.n	8001a12 <recvfrom_IO_6+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001a0c:	f06f 0304 	mvn.w	r3, #4
 8001a10:	e1d8      	b.n	8001dc4 <recvfrom_IO_6+0x3f8>
         break;
 8001a12:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001a14:	89bb      	ldrh	r3, [r7, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <recvfrom_IO_6+0x54>
 8001a1a:	f06f 030d 	mvn.w	r3, #13
 8001a1e:	e1d1      	b.n	8001dc4 <recvfrom_IO_6+0x3f8>
   if(sock_remained_size[sn] == 0)
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	4a93      	ldr	r2, [pc, #588]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d128      	bne.n	8001a7e <recvfrom_IO_6+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fdd9 	bl	80025e6 <getSn_RX_RSR>
 8001a34:	4603      	mov	r3, r0
 8001a36:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fc29 	bl	800229c <WIZCHIP_READ>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <recvfrom_IO_6+0x8a>
 8001a50:	f06f 0303 	mvn.w	r3, #3
 8001a54:	e1b6      	b.n	8001dc4 <recvfrom_IO_6+0x3f8>
#ifndef IPV6_AVAILABLE
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8001a56:	4b87      	ldr	r3, [pc, #540]	; (8001c74 <recvfrom_IO_6+0x2a8>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	fa42 f303 	asr.w	r3, r2, r3
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <recvfrom_IO_6+0xa8>
 8001a6a:	8bfb      	ldrh	r3, [r7, #30]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <recvfrom_IO_6+0xa8>
 8001a70:	2300      	movs	r3, #0
 8001a72:	e1a7      	b.n	8001dc4 <recvfrom_IO_6+0x3f8>
         if(pack_len != 0) break;
 8001a74:	8bfb      	ldrh	r3, [r7, #30]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d100      	bne.n	8001a7c <recvfrom_IO_6+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8001a7a:	e7d7      	b.n	8001a2c <recvfrom_IO_6+0x60>
         if(pack_len != 0) break;
 8001a7c:	bf00      	nop
      pack_len = head[0] & 0x07;
      pack_len = (pack_len << 8) + head[1];
   #endif 
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8001a7e:	7f7b      	ldrb	r3, [r7, #29]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	3b02      	subs	r3, #2
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	f200 8159 	bhi.w	8001d3e <recvfrom_IO_6+0x372>
 8001a8c:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <recvfrom_IO_6+0xc8>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001ac9 	.word	0x08001ac9
 8001a98:	08001c7d 	.word	0x08001c7d
 8001a9c:	08001bab 	.word	0x08001bab
 8001aa0:	08001d3f 	.word	0x08001d3f
 8001aa4:	08001d3f 	.word	0x08001d3f
 8001aa8:	08001d3f 	.word	0x08001d3f
 8001aac:	08001d3f 	.word	0x08001d3f
 8001ab0:	08001d3f 	.word	0x08001d3f
 8001ab4:	08001ac9 	.word	0x08001ac9
 8001ab8:	08001c7d 	.word	0x08001c7d
 8001abc:	08001d3f 	.word	0x08001d3f
 8001ac0:	08001d3f 	.word	0x08001d3f
 8001ac4:	08001ac9 	.word	0x08001ac9
            setSn_CR(sn,Sn_CR_RECV);

            while(getSn_CR(sn));

#else    
         if(sock_remained_size[sn] == 0)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	4a69      	ldr	r2, [pc, #420]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d152      	bne.n	8001b7a <recvfrom_IO_6+0x1ae>
         {
            wiz_recv_data(sn, head, 8);
 8001ad4:	f107 0114 	add.w	r1, r7, #20
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2208      	movs	r2, #8
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fe29 	bl	8002734 <wiz_recv_data>
            setSn_CR(sn,Sn_CR_RECV);
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fc1f 	bl	8002334 <WIZCHIP_WRITE>
            while(getSn_CR(sn));
 8001af6:	bf00      	nop
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	3301      	adds	r3, #1
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fbc9 	bl	800229c <WIZCHIP_READ>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f3      	bne.n	8001af8 <recvfrom_IO_6+0x12c>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
            addr[0] = head[0];      
 8001b10:	7d3a      	ldrb	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	701a      	strb	r2, [r3, #0]
            addr[1] = head[1];
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	7d7a      	ldrb	r2, [r7, #21]
 8001b1c:	701a      	strb	r2, [r3, #0]
            addr[2] = head[2];
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3302      	adds	r3, #2
 8001b22:	7dba      	ldrb	r2, [r7, #22]
 8001b24:	701a      	strb	r2, [r3, #0]
            addr[3] = head[3];
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3303      	adds	r3, #3
 8001b2a:	7dfa      	ldrb	r2, [r7, #23]
 8001b2c:	701a      	strb	r2, [r3, #0]
            *port = head[4];
 8001b2e:	7e3b      	ldrb	r3, [r7, #24]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b34:	801a      	strh	r2, [r3, #0]
            *port = (*port << 8) + head[5];
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	7e7b      	ldrb	r3, [r7, #25]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b48:	801a      	strh	r2, [r3, #0]
            sock_remained_size[sn] = head[6];
 8001b4a:	7eba      	ldrb	r2, [r7, #26]
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	b291      	uxth	r1, r2
 8001b50:	4a47      	ldr	r2, [pc, #284]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001b52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	4a45      	ldr	r2, [pc, #276]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	b299      	uxth	r1, r3
 8001b62:	7efb      	ldrb	r3, [r7, #27]
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	440a      	add	r2, r1
 8001b6a:	b291      	uxth	r1, r2
 8001b6c:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001b6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
            sock_pack_info[sn] = PACK_FIRST;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	4a40      	ldr	r2, [pc, #256]	; (8001c78 <recvfrom_IO_6+0x2ac>)
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	54d1      	strb	r1, [r2, r3]
         }
			if(len < sock_remained_size[sn]) pack_len = len;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	4a3c      	ldr	r2, [pc, #240]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b82:	89ba      	ldrh	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d202      	bcs.n	8001b8e <recvfrom_IO_6+0x1c2>
 8001b88:	89bb      	ldrh	r3, [r7, #12]
 8001b8a:	83fb      	strh	r3, [r7, #30]
 8001b8c:	e004      	b.n	8001b98 <recvfrom_IO_6+0x1cc>
			else pack_len = sock_remained_size[sn];
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	4a37      	ldr	r2, [pc, #220]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b96:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8001b98:	8bfb      	ldrh	r3, [r7, #30]
 8001b9a:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8001b9c:	8bfa      	ldrh	r2, [r7, #30]
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fdc6 	bl	8002734 <wiz_recv_data>
#endif         
            break;
 8001ba8:	e0d5      	b.n	8001d56 <recvfrom_IO_6+0x38a>
      case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d146      	bne.n	8001c44 <recvfrom_IO_6+0x278>
	      {
   			wiz_recv_data(sn, head, 2);
 8001bb6:	f107 0114 	add.w	r1, r7, #20
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fdb8 	bl	8002734 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	3301      	adds	r3, #1
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fbae 	bl	8002334 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001bd8:	bf00      	nop
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	3301      	adds	r3, #1
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fb58 	bl	800229c <WIZCHIP_READ>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f3      	bne.n	8001bda <recvfrom_IO_6+0x20e>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8001bf2:	7d3a      	ldrb	r2, [r7, #20]
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	b291      	uxth	r1, r2
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001bfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	7d7b      	ldrb	r3, [r7, #21]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	3a02      	subs	r2, #2
 8001c16:	b291      	uxth	r1, r2
 8001c18:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001c1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c26:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d906      	bls.n	8001c3c <recvfrom_IO_6+0x270>
   			{
   			   close(sn);
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fc9d 	bl	8001570 <close>
   			   return SOCKFATAL_PACKLEN;
 8001c36:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8001c3a:	e0c3      	b.n	8001dc4 <recvfrom_IO_6+0x3f8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <recvfrom_IO_6+0x2ac>)
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c4c:	89ba      	ldrh	r2, [r7, #12]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d202      	bcs.n	8001c58 <recvfrom_IO_6+0x28c>
 8001c52:	89bb      	ldrh	r3, [r7, #12]
 8001c54:	83fb      	strh	r3, [r7, #30]
 8001c56:	e004      	b.n	8001c62 <recvfrom_IO_6+0x296>
			else pack_len = sock_remained_size[sn];
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <recvfrom_IO_6+0x2a4>)
 8001c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c60:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8001c62:	8bfa      	ldrh	r2, [r7, #30]
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fd63 	bl	8002734 <wiz_recv_data>
         break; 
 8001c6e:	e072      	b.n	8001d56 <recvfrom_IO_6+0x38a>
 8001c70:	200002cc 	.word	0x200002cc
 8001c74:	200002c8 	.word	0x200002c8
 8001c78:	200002dc 	.word	0x200002dc
   //#if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW6:
      case Sn_MR_IPRAW4 : 
         if(sock_remained_size[sn] == 0)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	4a53      	ldr	r2, [pc, #332]	; (8001dcc <recvfrom_IO_6+0x400>)
 8001c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d144      	bne.n	8001d12 <recvfrom_IO_6+0x346>
		   {
   			wiz_recv_data(sn, head, 6);
 8001c88:	f107 0114 	add.w	r1, r7, #20
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2206      	movs	r2, #6
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 fd4f 	bl	8002734 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ca2:	2140      	movs	r1, #64	; 0x40
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fb45 	bl	8002334 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001caa:	bf00      	nop
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 faef 	bl	800229c <WIZCHIP_READ>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f3      	bne.n	8001cac <recvfrom_IO_6+0x2e0>
   			addr[0] = head[0];
 8001cc4:	7d3a      	ldrb	r2, [r7, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	7d7a      	ldrb	r2, [r7, #21]
 8001cd0:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	7dba      	ldrb	r2, [r7, #22]
 8001cd8:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3303      	adds	r3, #3
 8001cde:	7dfa      	ldrb	r2, [r7, #23]
 8001ce0:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8001ce2:	7e3a      	ldrb	r2, [r7, #24]
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	b291      	uxth	r1, r2
 8001ce8:	4a38      	ldr	r2, [pc, #224]	; (8001dcc <recvfrom_IO_6+0x400>)
 8001cea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	4a36      	ldr	r2, [pc, #216]	; (8001dcc <recvfrom_IO_6+0x400>)
 8001cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	b299      	uxth	r1, r3
 8001cfa:	7e7b      	ldrb	r3, [r7, #25]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	440a      	add	r2, r1
 8001d02:	b291      	uxth	r1, r2
 8001d04:	4a31      	ldr	r2, [pc, #196]	; (8001dcc <recvfrom_IO_6+0x400>)
 8001d06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	4a30      	ldr	r2, [pc, #192]	; (8001dd0 <recvfrom_IO_6+0x404>)
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <recvfrom_IO_6+0x400>)
 8001d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d1a:	89ba      	ldrh	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d202      	bcs.n	8001d26 <recvfrom_IO_6+0x35a>
 8001d20:	89bb      	ldrh	r3, [r7, #12]
 8001d22:	83fb      	strh	r3, [r7, #30]
 8001d24:	e004      	b.n	8001d30 <recvfrom_IO_6+0x364>
			else pack_len = sock_remained_size[sn];
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	4a28      	ldr	r2, [pc, #160]	; (8001dcc <recvfrom_IO_6+0x400>)
 8001d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d2e:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8001d30:	8bfa      	ldrh	r2, [r7, #30]
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fcfc 	bl	8002734 <wiz_recv_data>
			break;
 8001d3c:	e00b      	b.n	8001d56 <recvfrom_IO_6+0x38a>
//#endif 
         default:
            wiz_recv_ignore(sn, pack_len); // data copy.
 8001d3e:	8bfa      	ldrh	r2, [r7, #30]
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fd51 	bl	80027ec <wiz_recv_ignore>
            sock_remained_size[sn] = pack_len;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	491f      	ldr	r1, [pc, #124]	; (8001dcc <recvfrom_IO_6+0x400>)
 8001d4e:	8bfa      	ldrh	r2, [r7, #30]
 8001d50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            break;
 8001d54:	bf00      	nop
      sock_remained_size[sn] -= pack_len;
      if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= PACK_REMAINED;
      else sock_pack_info[sn] |= PACK_COMPLETED;
      
#else 
	setSn_CR(sn,Sn_CR_RECV);
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d62:	2140      	movs	r1, #64	; 0x40
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fae5 	bl	8002334 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8001d6a:	bf00      	nop
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	3301      	adds	r3, #1
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fa8f 	bl	800229c <WIZCHIP_READ>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f3      	bne.n	8001d6c <recvfrom_IO_6+0x3a0>
	sock_remained_size[sn] -= pack_len;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <recvfrom_IO_6+0x400>)
 8001d88:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	8bfa      	ldrh	r2, [r7, #30]
 8001d90:	1a8a      	subs	r2, r1, r2
 8001d92:	b291      	uxth	r1, r2
 8001d94:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <recvfrom_IO_6+0x400>)
 8001d96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <recvfrom_IO_6+0x400>)
 8001d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <recvfrom_IO_6+0x3ee>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <recvfrom_IO_6+0x404>)
 8001daa:	5cd2      	ldrb	r2, [r2, r3]
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	b2d1      	uxtb	r1, r2
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <recvfrom_IO_6+0x404>)
 8001db6:	54d1      	strb	r1, [r2, r3]
 8001db8:	e003      	b.n	8001dc2 <recvfrom_IO_6+0x3f6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <recvfrom_IO_6+0x404>)
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	54d1      	strb	r1, [r2, r3]
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
#endif 
   return (int32_t)pack_len;
 8001dc2:	8bfb      	ldrh	r3, [r7, #30]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200002cc 	.word	0x200002cc
 8001dd0:	200002dc 	.word	0x200002dc

08001dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_MspInit+0x4c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_MspInit+0x4c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_MspInit+0x4c>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e12:	2007      	movs	r0, #7
 8001e14:	f001 fa2c 	bl	8003270 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2e      	ldr	r2, [pc, #184]	; (8001efc <HAL_ADC_MspInit+0xd8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d128      	bne.n	8001e98 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a2c      	ldr	r2, [pc, #176]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a25      	ldr	r2, [pc, #148]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = TPS_ADC1_Pin;
 8001e7e:	2308      	movs	r3, #8
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e82:	2303      	movs	r3, #3
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TPS_ADC1_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	481c      	ldr	r0, [pc, #112]	; (8001f04 <HAL_ADC_MspInit+0xe0>)
 8001e92:	f001 fa21 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e96:	e02c      	b.n	8001ef2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1a      	ldr	r2, [pc, #104]	; (8001f08 <HAL_ADC_MspInit+0xe4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d127      	bne.n	8001ef2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_ADC_MspInit+0xdc>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TPS_ADC2_Pin;
 8001eda:	2304      	movs	r3, #4
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TPS_ADC2_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4807      	ldr	r0, [pc, #28]	; (8001f0c <HAL_ADC_MspInit+0xe8>)
 8001eee:	f001 f9f3 	bl	80032d8 <HAL_GPIO_Init>
}
 8001ef2:	bf00      	nop
 8001ef4:	3730      	adds	r7, #48	; 0x30
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40012000 	.word	0x40012000
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000
 8001f08:	40012100 	.word	0x40012100
 8001f0c:	40020800 	.word	0x40020800

08001f10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_SPI_MspInit+0x84>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d12b      	bne.n	8001f8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_SPI_MspInit+0x88>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <HAL_SPI_MspInit+0x88>)
 8001f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_SPI_MspInit+0x88>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_SPI_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <HAL_SPI_MspInit+0x88>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_SPI_MspInit+0x88>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MISO_Pin|W5500_MOSI_Pin;
 8001f6a:	2338      	movs	r3, #56	; 0x38
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	; (8001f9c <HAL_SPI_MspInit+0x8c>)
 8001f86:	f001 f9a7 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	; 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40013000 	.word	0x40013000
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020400 	.word	0x40020400

08001fa0 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a34      	ldr	r2, [pc, #208]	; (8002090 <HAL_TIM_MspPostInit+0xf0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d11f      	bne.n	8002002 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	4b33      	ldr	r3, [pc, #204]	; (8002094 <HAL_TIM_MspPostInit+0xf4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a32      	ldr	r2, [pc, #200]	; (8002094 <HAL_TIM_MspPostInit+0xf4>)
 8001fcc:	f043 0310 	orr.w	r3, r3, #16
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_TIM_MspPostInit+0xf4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8001fde:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4827      	ldr	r0, [pc, #156]	; (8002098 <HAL_TIM_MspPostInit+0xf8>)
 8001ffc:	f001 f96c 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002000:	e042      	b.n	8002088 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200a:	d13d      	bne.n	8002088 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_TIM_MspPostInit+0xf4>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_TIM_MspPostInit+0xf4>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6313      	str	r3, [r2, #48]	; 0x30
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_TIM_MspPostInit+0xf4>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_TIM_MspPostInit+0xf4>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_TIM_MspPostInit+0xf4>)
 8002032:	f043 0302 	orr.w	r3, r3, #2
 8002036:	6313      	str	r3, [r2, #48]	; 0x30
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_TIM_MspPostInit+0xf4>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM5_Pin;
 8002044:	f248 0306 	movw	r3, #32774	; 0x8006
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002056:	2301      	movs	r3, #1
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	480e      	ldr	r0, [pc, #56]	; (800209c <HAL_TIM_MspPostInit+0xfc>)
 8002062:	f001 f939 	bl	80032d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM8_Pin;
 8002066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002078:	2301      	movs	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM8_GPIO_Port, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4807      	ldr	r0, [pc, #28]	; (80020a0 <HAL_TIM_MspPostInit+0x100>)
 8002084:	f001 f928 	bl	80032d8 <HAL_GPIO_Init>
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40010000 	.word	0x40010000
 8002094:	40023800 	.word	0x40023800
 8002098:	40021000 	.word	0x40021000
 800209c:	40020000 	.word	0x40020000
 80020a0:	40020400 	.word	0x40020400

080020a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_UART_MspInit+0xc0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d14a      	bne.n	800215c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_UART_MspInit+0xc4>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a26      	ldr	r2, [pc, #152]	; (8002168 <HAL_UART_MspInit+0xc4>)
 80020d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <HAL_UART_MspInit+0xc4>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_UART_MspInit+0xc4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <HAL_UART_MspInit+0xc4>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_UART_MspInit+0xc4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_UART_MspInit+0xc4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_UART_MspInit+0xc4>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b16      	ldr	r3, [pc, #88]	; (8002168 <HAL_UART_MspInit+0xc4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800211a:	2301      	movs	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800212a:	2308      	movs	r3, #8
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	480d      	ldr	r0, [pc, #52]	; (800216c <HAL_UART_MspInit+0xc8>)
 8002136:	f001 f8cf 	bl	80032d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800213a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800214c:	2308      	movs	r3, #8
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4806      	ldr	r0, [pc, #24]	; (8002170 <HAL_UART_MspInit+0xcc>)
 8002158:	f001 f8be 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800215c:	bf00      	nop
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40004c00 	.word	0x40004c00
 8002168:	40023800 	.word	0x40023800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020800 	.word	0x40020800

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <NMI_Handler+0x4>

0800217a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <MemManage_Handler+0x4>

08002186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <UsageFault_Handler+0x4>

08002192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c0:	f000 fd22 	bl	8002c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	return 1;
 80021cc:	2301      	movs	r3, #1
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_kill>:

int _kill(int pid, int sig)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021e2:	f003 fabd 	bl	8005760 <__errno>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2216      	movs	r2, #22
 80021ea:	601a      	str	r2, [r3, #0]
	return -1;
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_exit>:

void _exit (int status)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ffe7 	bl	80021d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800220a:	e7fe      	b.n	800220a <_exit+0x12>

0800220c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <_sbrk+0x5c>)
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <_sbrk+0x60>)
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <_sbrk+0x64>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <_sbrk+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800223c:	f003 fa90 	bl	8005760 <__errno>
 8002240:	4603      	mov	r3, r0
 8002242:	220c      	movs	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800224a:	e009      	b.n	8002260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <_sbrk+0x64>)
 800225c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20020000 	.word	0x20020000
 800226c:	00000400 	.word	0x00000400
 8002270:	200002e4 	.word	0x200002e4
 8002274:	20000310 	.word	0x20000310

08002278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <SystemInit+0x20>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <SystemInit+0x20>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <WIZCHIP_READ+0x94>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <WIZCHIP_READ+0x94>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <WIZCHIP_READ+0x94>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <WIZCHIP_READ+0x24>
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <WIZCHIP_READ+0x94>)
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d114      	bne.n	80022ea <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <WIZCHIP_READ+0x94>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	0c12      	lsrs	r2, r2, #16
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	4610      	mov	r0, r2
 80022cc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <WIZCHIP_READ+0x94>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	0a12      	lsrs	r2, r2, #8
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	4610      	mov	r0, r2
 80022da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <WIZCHIP_READ+0x94>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	4610      	mov	r0, r2
 80022e6:	4798      	blx	r3
 80022e8:	e011      	b.n	800230e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <WIZCHIP_READ+0x94>)
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	f107 020c 	add.w	r2, r7, #12
 8002308:	2103      	movs	r1, #3
 800230a:	4610      	mov	r0, r2
 800230c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <WIZCHIP_READ+0x94>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4798      	blx	r3
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <WIZCHIP_READ+0x94>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <WIZCHIP_READ+0x94>)
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	4798      	blx	r3
   return ret;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000008 	.word	0x20000008

08002334 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <WIZCHIP_WRITE+0x98>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <WIZCHIP_WRITE+0x98>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <WIZCHIP_WRITE+0x98>)
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	d119      	bne.n	8002390 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <WIZCHIP_WRITE+0x98>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	0c12      	lsrs	r2, r2, #16
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	4610      	mov	r0, r2
 8002368:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <WIZCHIP_WRITE+0x98>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	0a12      	lsrs	r2, r2, #8
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	4610      	mov	r0, r2
 8002376:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <WIZCHIP_WRITE+0x98>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	4610      	mov	r0, r2
 8002382:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <WIZCHIP_WRITE+0x98>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	4610      	mov	r0, r2
 800238c:	4798      	blx	r3
 800238e:	e013      	b.n	80023b8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0c1b      	lsrs	r3, r3, #16
 8002394:	b2db      	uxtb	r3, r3
 8002396:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b2db      	uxtb	r3, r3
 800239e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <WIZCHIP_WRITE+0x98>)
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	f107 020c 	add.w	r2, r7, #12
 80023b2:	2104      	movs	r1, #4
 80023b4:	4610      	mov	r0, r2
 80023b6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <WIZCHIP_WRITE+0x98>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80023be:	4b03      	ldr	r3, [pc, #12]	; (80023cc <WIZCHIP_WRITE+0x98>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	4798      	blx	r3
}
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000008 	.word	0x20000008

080023d0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	4613      	mov	r3, r2
 80023dc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80023ea:	4b28      	ldr	r3, [pc, #160]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <WIZCHIP_READ_BUF+0x2a>
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d126      	bne.n	8002448 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	0c12      	lsrs	r2, r2, #16
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	4610      	mov	r0, r2
 8002406:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002408:	4b20      	ldr	r3, [pc, #128]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	0a12      	lsrs	r2, r2, #8
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	4610      	mov	r0, r2
 8002414:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	4610      	mov	r0, r2
 8002420:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002422:	2300      	movs	r3, #0
 8002424:	82fb      	strh	r3, [r7, #22]
 8002426:	e00a      	b.n	800243e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	8afa      	ldrh	r2, [r7, #22]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	188c      	adds	r4, r1, r2
 8002432:	4798      	blx	r3
 8002434:	4603      	mov	r3, r0
 8002436:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002438:	8afb      	ldrh	r3, [r7, #22]
 800243a:	3301      	adds	r3, #1
 800243c:	82fb      	strh	r3, [r7, #22]
 800243e:	8afa      	ldrh	r2, [r7, #22]
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	429a      	cmp	r2, r3
 8002444:	d3f0      	bcc.n	8002428 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002446:	e017      	b.n	8002478 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	0c1b      	lsrs	r3, r3, #16
 800244c:	b2db      	uxtb	r3, r3
 800244e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	b2db      	uxtb	r3, r3
 8002456:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	f107 0210 	add.w	r2, r7, #16
 8002466:	2103      	movs	r1, #3
 8002468:	4610      	mov	r0, r2
 800246a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	4611      	mov	r1, r2
 8002474:	68b8      	ldr	r0, [r7, #8]
 8002476:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800247e:	4b03      	ldr	r3, [pc, #12]	; (800248c <WIZCHIP_READ_BUF+0xbc>)
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	4798      	blx	r3
}
 8002484:	bf00      	nop
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	20000008 	.word	0x20000008

08002490 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80024a4:	4b29      	ldr	r3, [pc, #164]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80024b2:	4b26      	ldr	r3, [pc, #152]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d126      	bne.n	8002508 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	0c12      	lsrs	r2, r2, #16
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	4610      	mov	r0, r2
 80024c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80024c8:	4b20      	ldr	r3, [pc, #128]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	0a12      	lsrs	r2, r2, #8
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	4610      	mov	r0, r2
 80024d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	4610      	mov	r0, r2
 80024e0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	82fb      	strh	r3, [r7, #22]
 80024e6:	e00a      	b.n	80024fe <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	8afa      	ldrh	r2, [r7, #22]
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	440a      	add	r2, r1
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	4610      	mov	r0, r2
 80024f6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80024f8:	8afb      	ldrh	r3, [r7, #22]
 80024fa:	3301      	adds	r3, #1
 80024fc:	82fb      	strh	r3, [r7, #22]
 80024fe:	8afa      	ldrh	r2, [r7, #22]
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	429a      	cmp	r2, r3
 8002504:	d3f0      	bcc.n	80024e8 <WIZCHIP_WRITE_BUF+0x58>
 8002506:	e017      	b.n	8002538 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	b2db      	uxtb	r3, r3
 800250e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	b2db      	uxtb	r3, r3
 8002516:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	f107 0210 	add.w	r2, r7, #16
 8002526:	2103      	movs	r1, #3
 8002528:	4610      	mov	r0, r2
 800252a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	4611      	mov	r1, r2
 8002534:	68b8      	ldr	r0, [r7, #8]
 8002536:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800253e:	4b03      	ldr	r3, [pc, #12]	; (800254c <WIZCHIP_WRITE_BUF+0xbc>)
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	4798      	blx	r3
}
 8002544:	bf00      	nop
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000008 	.word	0x20000008

08002550 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800255a:	2300      	movs	r3, #0
 800255c:	81fb      	strh	r3, [r7, #14]
 800255e:	2300      	movs	r3, #0
 8002560:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	3301      	adds	r3, #1
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe94 	bl	800229c <WIZCHIP_READ>
 8002574:	4603      	mov	r3, r0
 8002576:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002578:	89bb      	ldrh	r3, [r7, #12]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	b29c      	uxth	r4, r3
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	3301      	adds	r3, #1
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fe86 	bl	800229c <WIZCHIP_READ>
 8002590:	4603      	mov	r3, r0
 8002592:	b29b      	uxth	r3, r3
 8002594:	4423      	add	r3, r4
 8002596:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002598:	89bb      	ldrh	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01a      	beq.n	80025d4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	3301      	adds	r3, #1
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fe76 	bl	800229c <WIZCHIP_READ>
 80025b0:	4603      	mov	r3, r0
 80025b2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80025b4:	89fb      	ldrh	r3, [r7, #14]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	b29c      	uxth	r4, r3
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	3301      	adds	r3, #1
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fe68 	bl	800229c <WIZCHIP_READ>
 80025cc:	4603      	mov	r3, r0
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	4423      	add	r3, r4
 80025d2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80025d4:	89fa      	ldrh	r2, [r7, #14]
 80025d6:	89bb      	ldrh	r3, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1c2      	bne.n	8002562 <getSn_TX_FSR+0x12>
   return val;
 80025dc:	89fb      	ldrh	r3, [r7, #14]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}

080025e6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80025e6:	b590      	push	{r4, r7, lr}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	81fb      	strh	r3, [r7, #14]
 80025f4:	2300      	movs	r3, #0
 80025f6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	3301      	adds	r3, #1
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fe49 	bl	800229c <WIZCHIP_READ>
 800260a:	4603      	mov	r3, r0
 800260c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800260e:	89bb      	ldrh	r3, [r7, #12]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b29c      	uxth	r4, r3
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	3301      	adds	r3, #1
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fe3b 	bl	800229c <WIZCHIP_READ>
 8002626:	4603      	mov	r3, r0
 8002628:	b29b      	uxth	r3, r3
 800262a:	4423      	add	r3, r4
 800262c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800262e:	89bb      	ldrh	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01a      	beq.n	800266a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	3301      	adds	r3, #1
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fe2b 	bl	800229c <WIZCHIP_READ>
 8002646:	4603      	mov	r3, r0
 8002648:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800264a:	89fb      	ldrh	r3, [r7, #14]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	b29c      	uxth	r4, r3
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	3301      	adds	r3, #1
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fe1d 	bl	800229c <WIZCHIP_READ>
 8002662:	4603      	mov	r3, r0
 8002664:	b29b      	uxth	r3, r3
 8002666:	4423      	add	r3, r4
 8002668:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800266a:	89fa      	ldrh	r2, [r7, #14]
 800266c:	89bb      	ldrh	r3, [r7, #12]
 800266e:	429a      	cmp	r2, r3
 8002670:	d1c2      	bne.n	80025f8 <getSn_RX_RSR+0x12>
   return val;
 8002672:	89fb      	ldrh	r3, [r7, #14]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	bd90      	pop	{r4, r7, pc}

0800267c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	6039      	str	r1, [r7, #0]
 8002686:	71fb      	strb	r3, [r7, #7]
 8002688:	4613      	mov	r3, r2
 800268a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002694:	88bb      	ldrh	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d048      	beq.n	800272c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	3301      	adds	r3, #1
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fdf8 	bl	800229c <WIZCHIP_READ>
 80026ac:	4603      	mov	r3, r0
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	b29c      	uxth	r4, r3
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	3301      	adds	r3, #1
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fdeb 	bl	800229c <WIZCHIP_READ>
 80026c6:	4603      	mov	r3, r0
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4423      	add	r3, r4
 80026cc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80026ce:	89fb      	ldrh	r3, [r7, #14]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	79fa      	ldrb	r2, [r7, #7]
 80026d4:	0092      	lsls	r2, r2, #2
 80026d6:	3202      	adds	r2, #2
 80026d8:	00d2      	lsls	r2, r2, #3
 80026da:	4413      	add	r3, r2
 80026dc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	461a      	mov	r2, r3
 80026e2:	6839      	ldr	r1, [r7, #0]
 80026e4:	68b8      	ldr	r0, [r7, #8]
 80026e6:	f7ff fed3 	bl	8002490 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80026ea:	89fa      	ldrh	r2, [r7, #14]
 80026ec:	88bb      	ldrh	r3, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	3301      	adds	r3, #1
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80026fe:	461a      	mov	r2, r3
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	b29b      	uxth	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f7ff fe12 	bl	8002334 <WIZCHIP_WRITE>
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	3301      	adds	r3, #1
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800271c:	461a      	mov	r2, r3
 800271e:	89fb      	ldrh	r3, [r7, #14]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4619      	mov	r1, r3
 8002724:	4610      	mov	r0, r2
 8002726:	f7ff fe05 	bl	8002334 <WIZCHIP_WRITE>
 800272a:	e000      	b.n	800272e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800272c:	bf00      	nop
}
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}

08002734 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	4613      	mov	r3, r2
 8002742:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800274c:	88bb      	ldrh	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d048      	beq.n	80027e4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	3301      	adds	r3, #1
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fd9c 	bl	800229c <WIZCHIP_READ>
 8002764:	4603      	mov	r3, r0
 8002766:	b29b      	uxth	r3, r3
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	b29c      	uxth	r4, r3
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	3301      	adds	r3, #1
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fd8f 	bl	800229c <WIZCHIP_READ>
 800277e:	4603      	mov	r3, r0
 8002780:	b29b      	uxth	r3, r3
 8002782:	4423      	add	r3, r4
 8002784:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002786:	89fb      	ldrh	r3, [r7, #14]
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	3203      	adds	r2, #3
 8002790:	00d2      	lsls	r2, r2, #3
 8002792:	4413      	add	r3, r2
 8002794:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002796:	88bb      	ldrh	r3, [r7, #4]
 8002798:	461a      	mov	r2, r3
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	68b8      	ldr	r0, [r7, #8]
 800279e:	f7ff fe17 	bl	80023d0 <WIZCHIP_READ_BUF>
   ptr += len;
 80027a2:	89fa      	ldrh	r2, [r7, #14]
 80027a4:	88bb      	ldrh	r3, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	3301      	adds	r3, #1
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80027b6:	461a      	mov	r2, r3
 80027b8:	89fb      	ldrh	r3, [r7, #14]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	b29b      	uxth	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f7ff fdb6 	bl	8002334 <WIZCHIP_WRITE>
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	3301      	adds	r3, #1
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80027d4:	461a      	mov	r2, r3
 80027d6:	89fb      	ldrh	r3, [r7, #14]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	4610      	mov	r0, r2
 80027de:	f7ff fda9 	bl	8002334 <WIZCHIP_WRITE>
 80027e2:	e000      	b.n	80027e6 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80027e4:	bf00      	nop
}
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd90      	pop	{r4, r7, pc}

080027ec <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	460a      	mov	r2, r1
 80027f6:	71fb      	strb	r3, [r7, #7]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	3301      	adds	r3, #1
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fd45 	bl	800229c <WIZCHIP_READ>
 8002812:	4603      	mov	r3, r0
 8002814:	b29b      	uxth	r3, r3
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	b29c      	uxth	r4, r3
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	3301      	adds	r3, #1
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fd38 	bl	800229c <WIZCHIP_READ>
 800282c:	4603      	mov	r3, r0
 800282e:	b29b      	uxth	r3, r3
 8002830:	4423      	add	r3, r4
 8002832:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8002834:	89fa      	ldrh	r2, [r7, #14]
 8002836:	88bb      	ldrh	r3, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	3301      	adds	r3, #1
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002848:	461a      	mov	r2, r3
 800284a:	89fb      	ldrh	r3, [r7, #14]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	b29b      	uxth	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f7ff fd6d 	bl	8002334 <WIZCHIP_WRITE>
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	3301      	adds	r3, #1
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002866:	461a      	mov	r2, r3
 8002868:	89fb      	ldrh	r3, [r7, #14]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f7ff fd60 	bl	8002334 <WIZCHIP_WRITE>
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}

0800287c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	70fb      	strb	r3, [r7, #3]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	2300      	movs	r3, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 8002920:	2300      	movs	r3, #0
 8002922:	81fb      	strh	r3, [r7, #14]
 8002924:	e00a      	b.n	800293c <wizchip_spi_readburst+0x28>
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <wizchip_spi_readburst+0x3c>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	687c      	ldr	r4, [r7, #4]
 800292c:	1c62      	adds	r2, r4, #1
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	4798      	blx	r3
 8002932:	4603      	mov	r3, r0
 8002934:	7023      	strb	r3, [r4, #0]
	for(uint16_t i=0; i<len; i++)
 8002936:	89fb      	ldrh	r3, [r7, #14]
 8002938:	3301      	adds	r3, #1
 800293a:	81fb      	strh	r3, [r7, #14]
 800293c:	89fa      	ldrh	r2, [r7, #14]
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	429a      	cmp	r2, r3
 8002942:	d3f0      	bcc.n	8002926 <wizchip_spi_readburst+0x12>
	}
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}
 800294e:	bf00      	nop
 8002950:	20000008 	.word	0x20000008

08002954 <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 8002960:	2300      	movs	r3, #0
 8002962:	81fb      	strh	r3, [r7, #14]
 8002964:	e00a      	b.n	800297c <wizchip_spi_writeburst+0x28>
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <wizchip_spi_writeburst+0x3c>)
 8002968:	6a1a      	ldr	r2, [r3, #32]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	1c59      	adds	r1, r3, #1
 800296e:	6079      	str	r1, [r7, #4]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	4790      	blx	r2
	for(uint16_t i=0; i<len; i++)
 8002976:	89fb      	ldrh	r3, [r7, #14]
 8002978:	3301      	adds	r3, #1
 800297a:	81fb      	strh	r3, [r7, #14]
 800297c:	89fa      	ldrh	r2, [r7, #14]
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	429a      	cmp	r2, r3
 8002982:	d3f0      	bcc.n	8002966 <wizchip_spi_writeburst+0x12>
	}
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000008 	.word	0x20000008

08002994 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <reg_wizchip_cs_cbfunc+0x16>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <reg_wizchip_cs_cbfunc+0x40>)
 80029ac:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <reg_wizchip_cs_cbfunc+0x44>)
 80029ae:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <reg_wizchip_cs_cbfunc+0x40>)
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <reg_wizchip_cs_cbfunc+0x48>)
 80029b4:	619a      	str	r2, [r3, #24]
 80029b6:	e006      	b.n	80029c6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <reg_wizchip_cs_cbfunc+0x40>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <reg_wizchip_cs_cbfunc+0x40>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6193      	str	r3, [r2, #24]
   }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000008 	.word	0x20000008
 80029d8:	08002899 	.word	0x08002899
 80029dc:	080028a7 	.word	0x080028a7

080029e0 <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80029ea:	bf00      	nop
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <reg_wizchip_spi_cbfunc+0x4c>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f9      	beq.n	80029ec <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <reg_wizchip_spi_cbfunc+0x24>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <reg_wizchip_spi_cbfunc+0x4c>)
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <reg_wizchip_spi_cbfunc+0x50>)
 8002a08:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <reg_wizchip_spi_cbfunc+0x4c>)
 8002a0c:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <reg_wizchip_spi_cbfunc+0x54>)
 8002a0e:	621a      	str	r2, [r3, #32]
 8002a10:	e006      	b.n	8002a20 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002a12:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <reg_wizchip_spi_cbfunc+0x4c>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <reg_wizchip_spi_cbfunc+0x4c>)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6213      	str	r3, [r2, #32]
   }
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	20000008 	.word	0x20000008
 8002a30:	080028ed 	.word	0x080028ed
 8002a34:	080028fd 	.word	0x080028fd

08002a38 <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002a42:	bf00      	nop
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f9      	beq.n	8002a44 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <reg_wizchip_spiburst_cbfunc+0x24>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <reg_wizchip_spiburst_cbfunc+0x50>)
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002a64:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <reg_wizchip_spiburst_cbfunc+0x54>)
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
 8002a68:	e006      	b.n	8002a78 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8002a6a:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	20000008 	.word	0x20000008
 8002a88:	08002915 	.word	0x08002915
 8002a8c:	08002955 	.word	0x08002955

08002a90 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2206      	movs	r2, #6
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002aa2:	f7ff fcf5 	bl	8002490 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	330e      	adds	r3, #14
 8002aaa:	2204      	movs	r2, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ab2:	f7ff fced 	bl	8002490 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	330a      	adds	r3, #10
 8002aba:	2204      	movs	r2, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002ac2:	f7ff fce5 	bl	8002490 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3306      	adds	r3, #6
 8002aca:	2204      	movs	r2, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002ad2:	f7ff fcdd 	bl	8002490 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7c9a      	ldrb	r2, [r3, #18]
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <wizchip_setnetinfo+0x78>)
 8002adc:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7cda      	ldrb	r2, [r3, #19]
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <wizchip_setnetinfo+0x78>)
 8002ae4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7d1a      	ldrb	r2, [r3, #20]
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <wizchip_setnetinfo+0x78>)
 8002aec:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7d5a      	ldrb	r2, [r3, #21]
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <wizchip_setnetinfo+0x78>)
 8002af4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7d9a      	ldrb	r2, [r3, #22]
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <wizchip_setnetinfo+0x7c>)
 8002afc:	701a      	strb	r2, [r3, #0]
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200002e8 	.word	0x200002e8
 8002b0c:	200002ec 	.word	0x200002ec

08002b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b14:	480d      	ldr	r0, [pc, #52]	; (8002b4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b16:	490e      	ldr	r1, [pc, #56]	; (8002b50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b18:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b1c:	e002      	b.n	8002b24 <LoopCopyDataInit>

08002b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b22:	3304      	adds	r3, #4

08002b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b28:	d3f9      	bcc.n	8002b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b2c:	4c0b      	ldr	r4, [pc, #44]	; (8002b5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b30:	e001      	b.n	8002b36 <LoopFillZerobss>

08002b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b34:	3204      	adds	r2, #4

08002b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b38:	d3fb      	bcc.n	8002b32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b3a:	f7ff fb9d 	bl	8002278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b3e:	f002 fe15 	bl	800576c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b42:	f7fd fef1 	bl	8000928 <main>
  bx  lr    
 8002b46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b50:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002b54:	080059ac 	.word	0x080059ac
  ldr r2, =_sbss
 8002b58:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002b5c:	20000310 	.word	0x20000310

08002b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b60:	e7fe      	b.n	8002b60 <ADC_IRQHandler>
	...

08002b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_Init+0x40>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <HAL_Init+0x40>)
 8002b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_Init+0x40>)
 8002b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <HAL_Init+0x40>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	f000 fb6f 	bl	8003270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f000 f808 	bl	8002ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b98:	f7ff f91c 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023c00 	.word	0x40023c00

08002ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_InitTick+0x54>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_InitTick+0x58>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fb79 	bl	80032be <HAL_SYSTICK_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00e      	b.n	8002bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	d80a      	bhi.n	8002bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002be4:	f000 fb4f 	bl	8003286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <HAL_InitTick+0x5c>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000004 	.word	0x20000004
 8002c00:	20000038 	.word	0x20000038
 8002c04:	20000034 	.word	0x20000034

08002c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_IncTick+0x20>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_IncTick+0x24>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_IncTick+0x24>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000038 	.word	0x20000038
 8002c2c:	200002fc 	.word	0x200002fc

08002c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return uwTick;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_GetTick+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	200002fc 	.word	0x200002fc

08002c48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e033      	b.n	8002cc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff f8dc 	bl	8001e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d118      	bne.n	8002cb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c8e:	f023 0302 	bic.w	r3, r3, #2
 8002c92:	f043 0202 	orr.w	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f93a 	bl	8002f14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f023 0303 	bic.w	r3, r3, #3
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
 8002cb6:	e001      	b.n	8002cbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x1c>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e105      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x228>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b09      	cmp	r3, #9
 8002cfa:	d925      	bls.n	8002d48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68d9      	ldr	r1, [r3, #12]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	3b1e      	subs	r3, #30
 8002d12:	2207      	movs	r2, #7
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	400a      	ands	r2, r1
 8002d20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68d9      	ldr	r1, [r3, #12]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	4603      	mov	r3, r0
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4403      	add	r3, r0
 8002d3a:	3b1e      	subs	r3, #30
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	e022      	b.n	8002d8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6919      	ldr	r1, [r3, #16]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43da      	mvns	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	400a      	ands	r2, r1
 8002d6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6919      	ldr	r1, [r3, #16]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4403      	add	r3, r0
 8002d84:	409a      	lsls	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d824      	bhi.n	8002de0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	3b05      	subs	r3, #5
 8002da8:	221f      	movs	r2, #31
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	400a      	ands	r2, r1
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b05      	subs	r3, #5
 8002dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8002dde:	e04c      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b0c      	cmp	r3, #12
 8002de6:	d824      	bhi.n	8002e32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	3b23      	subs	r3, #35	; 0x23
 8002dfa:	221f      	movs	r2, #31
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43da      	mvns	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	400a      	ands	r2, r1
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	3b23      	subs	r3, #35	; 0x23
 8002e24:	fa00 f203 	lsl.w	r2, r0, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e30:	e023      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	3b41      	subs	r3, #65	; 0x41
 8002e44:	221f      	movs	r2, #31
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	400a      	ands	r2, r1
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b41      	subs	r3, #65	; 0x41
 8002e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e7a:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_ADC_ConfigChannel+0x234>)
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <HAL_ADC_ConfigChannel+0x238>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d109      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x1cc>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b12      	cmp	r3, #18
 8002e8e:	d105      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_ADC_ConfigChannel+0x238>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d123      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x21e>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d003      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x1e6>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b11      	cmp	r3, #17
 8002eb4:	d11b      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d111      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <HAL_ADC_ConfigChannel+0x23c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <HAL_ADC_ConfigChannel+0x240>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	0c9a      	lsrs	r2, r3, #18
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ee0:	e002      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f9      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40012300 	.word	0x40012300
 8002f08:	40012000 	.word	0x40012000
 8002f0c:	20000004 	.word	0x20000004
 8002f10:	431bde83 	.word	0x431bde83

08002f14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f1c:	4b79      	ldr	r3, [pc, #484]	; (8003104 <ADC_Init+0x1f0>)
 8002f1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	021a      	lsls	r2, r3, #8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6899      	ldr	r1, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	4a58      	ldr	r2, [pc, #352]	; (8003108 <ADC_Init+0x1f4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d022      	beq.n	8002ff2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e00f      	b.n	8003012 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003010:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0202 	bic.w	r2, r2, #2
 8003020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6899      	ldr	r1, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7e1b      	ldrb	r3, [r3, #24]
 800302c:	005a      	lsls	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800305e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	3b01      	subs	r3, #1
 800306c:	035a      	lsls	r2, r3, #13
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	e007      	b.n	8003088 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003086:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	051a      	lsls	r2, r3, #20
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ca:	025a      	lsls	r2, r3, #9
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	029a      	lsls	r2, r3, #10
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40012300 	.word	0x40012300
 8003108:	0f000001 	.word	0x0f000001

0800310c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	60d3      	str	r3, [r2, #12]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db0a      	blt.n	800319a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	490c      	ldr	r1, [pc, #48]	; (80031bc <__NVIC_SetPriority+0x4c>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	440b      	add	r3, r1
 8003194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003198:	e00a      	b.n	80031b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4908      	ldr	r1, [pc, #32]	; (80031c0 <__NVIC_SetPriority+0x50>)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3b04      	subs	r3, #4
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	761a      	strb	r2, [r3, #24]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000e100 	.word	0xe000e100
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f1c3 0307 	rsb	r3, r3, #7
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf28      	it	cs
 80031e2:	2304      	movcs	r3, #4
 80031e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d902      	bls.n	80031f4 <NVIC_EncodePriority+0x30>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3b03      	subs	r3, #3
 80031f2:	e000      	b.n	80031f6 <NVIC_EncodePriority+0x32>
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800320c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43d9      	mvns	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	4313      	orrs	r3, r2
         );
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	; 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800323c:	d301      	bcc.n	8003242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323e:	2301      	movs	r3, #1
 8003240:	e00f      	b.n	8003262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <SysTick_Config+0x40>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324a:	210f      	movs	r1, #15
 800324c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003250:	f7ff ff8e 	bl	8003170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <SysTick_Config+0x40>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <SysTick_Config+0x40>)
 800325c:	2207      	movs	r2, #7
 800325e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	e000e010 	.word	0xe000e010

08003270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff47 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003298:	f7ff ff5c 	bl	8003154 <__NVIC_GetPriorityGrouping>
 800329c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	6978      	ldr	r0, [r7, #20]
 80032a4:	f7ff ff8e 	bl	80031c4 <NVIC_EncodePriority>
 80032a8:	4602      	mov	r2, r0
 80032aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff5d 	bl	8003170 <__NVIC_SetPriority>
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ffb0 	bl	800322c <SysTick_Config>
 80032cc:	4603      	mov	r3, r0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	e16b      	b.n	80035cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f4:	2201      	movs	r2, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	f040 815a 	bne.w	80035c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d005      	beq.n	800332a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003326:	2b02      	cmp	r3, #2
 8003328:	d130      	bne.n	800338c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003360:	2201      	movs	r2, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 0201 	and.w	r2, r3, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b03      	cmp	r3, #3
 8003396:	d017      	beq.n	80033c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d123      	bne.n	800341c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	69b9      	ldr	r1, [r7, #24]
 8003418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80b4 	beq.w	80035c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b60      	ldr	r3, [pc, #384]	; (80035e4 <HAL_GPIO_Init+0x30c>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	4a5f      	ldr	r2, [pc, #380]	; (80035e4 <HAL_GPIO_Init+0x30c>)
 8003468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800346c:	6453      	str	r3, [r2, #68]	; 0x44
 800346e:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_GPIO_Init+0x30c>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800347a:	4a5b      	ldr	r2, [pc, #364]	; (80035e8 <HAL_GPIO_Init+0x310>)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3302      	adds	r3, #2
 8003482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	220f      	movs	r2, #15
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a52      	ldr	r2, [pc, #328]	; (80035ec <HAL_GPIO_Init+0x314>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d02b      	beq.n	80034fe <HAL_GPIO_Init+0x226>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a51      	ldr	r2, [pc, #324]	; (80035f0 <HAL_GPIO_Init+0x318>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d025      	beq.n	80034fa <HAL_GPIO_Init+0x222>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a50      	ldr	r2, [pc, #320]	; (80035f4 <HAL_GPIO_Init+0x31c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <HAL_GPIO_Init+0x21e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4f      	ldr	r2, [pc, #316]	; (80035f8 <HAL_GPIO_Init+0x320>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d019      	beq.n	80034f2 <HAL_GPIO_Init+0x21a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <HAL_GPIO_Init+0x324>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0x216>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4d      	ldr	r2, [pc, #308]	; (8003600 <HAL_GPIO_Init+0x328>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_GPIO_Init+0x212>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4c      	ldr	r2, [pc, #304]	; (8003604 <HAL_GPIO_Init+0x32c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <HAL_GPIO_Init+0x20e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4b      	ldr	r2, [pc, #300]	; (8003608 <HAL_GPIO_Init+0x330>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_GPIO_Init+0x20a>
 80034de:	2307      	movs	r3, #7
 80034e0:	e00e      	b.n	8003500 <HAL_GPIO_Init+0x228>
 80034e2:	2308      	movs	r3, #8
 80034e4:	e00c      	b.n	8003500 <HAL_GPIO_Init+0x228>
 80034e6:	2306      	movs	r3, #6
 80034e8:	e00a      	b.n	8003500 <HAL_GPIO_Init+0x228>
 80034ea:	2305      	movs	r3, #5
 80034ec:	e008      	b.n	8003500 <HAL_GPIO_Init+0x228>
 80034ee:	2304      	movs	r3, #4
 80034f0:	e006      	b.n	8003500 <HAL_GPIO_Init+0x228>
 80034f2:	2303      	movs	r3, #3
 80034f4:	e004      	b.n	8003500 <HAL_GPIO_Init+0x228>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e002      	b.n	8003500 <HAL_GPIO_Init+0x228>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_GPIO_Init+0x228>
 80034fe:	2300      	movs	r3, #0
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	f002 0203 	and.w	r2, r2, #3
 8003506:	0092      	lsls	r2, r2, #2
 8003508:	4093      	lsls	r3, r2
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003510:	4935      	ldr	r1, [pc, #212]	; (80035e8 <HAL_GPIO_Init+0x310>)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	3302      	adds	r3, #2
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800351e:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_GPIO_Init+0x334>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003542:	4a32      	ldr	r2, [pc, #200]	; (800360c <HAL_GPIO_Init+0x334>)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_GPIO_Init+0x334>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800356c:	4a27      	ldr	r2, [pc, #156]	; (800360c <HAL_GPIO_Init+0x334>)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <HAL_GPIO_Init+0x334>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003596:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_GPIO_Init+0x334>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_GPIO_Init+0x334>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c0:	4a12      	ldr	r2, [pc, #72]	; (800360c <HAL_GPIO_Init+0x334>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3301      	adds	r3, #1
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2b0f      	cmp	r3, #15
 80035d0:	f67f ae90 	bls.w	80032f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3724      	adds	r7, #36	; 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	40013800 	.word	0x40013800
 80035ec:	40020000 	.word	0x40020000
 80035f0:	40020400 	.word	0x40020400
 80035f4:	40020800 	.word	0x40020800
 80035f8:	40020c00 	.word	0x40020c00
 80035fc:	40021000 	.word	0x40021000
 8003600:	40021400 	.word	0x40021400
 8003604:	40021800 	.word	0x40021800
 8003608:	40021c00 	.word	0x40021c00
 800360c:	40013c00 	.word	0x40013c00

08003610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800362c:	e003      	b.n	8003636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	041a      	lsls	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	619a      	str	r2, [r3, #24]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e264      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d075      	beq.n	800374e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003662:	4ba3      	ldr	r3, [pc, #652]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b04      	cmp	r3, #4
 800366c:	d00c      	beq.n	8003688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366e:	4ba0      	ldr	r3, [pc, #640]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003676:	2b08      	cmp	r3, #8
 8003678:	d112      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367a:	4b9d      	ldr	r3, [pc, #628]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003686:	d10b      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	4b99      	ldr	r3, [pc, #612]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d05b      	beq.n	800374c <HAL_RCC_OscConfig+0x108>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d157      	bne.n	800374c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e23f      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a8:	d106      	bne.n	80036b8 <HAL_RCC_OscConfig+0x74>
 80036aa:	4b91      	ldr	r3, [pc, #580]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a90      	ldr	r2, [pc, #576]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e01d      	b.n	80036f4 <HAL_RCC_OscConfig+0xb0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x98>
 80036c2:	4b8b      	ldr	r3, [pc, #556]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a8a      	ldr	r2, [pc, #552]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a87      	ldr	r2, [pc, #540]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0xb0>
 80036dc:	4b84      	ldr	r3, [pc, #528]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a83      	ldr	r2, [pc, #524]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b81      	ldr	r3, [pc, #516]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a80      	ldr	r2, [pc, #512]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7ff fa98 	bl	8002c30 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003704:	f7ff fa94 	bl	8002c30 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e204      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b76      	ldr	r3, [pc, #472]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0xc0>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7ff fa84 	bl	8002c30 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372c:	f7ff fa80 	bl	8002c30 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1f0      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0xe8>
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d063      	beq.n	8003822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800375a:	4b65      	ldr	r3, [pc, #404]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376e:	2b08      	cmp	r3, #8
 8003770:	d11c      	bne.n	80037ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	4b5c      	ldr	r3, [pc, #368]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RCC_OscConfig+0x152>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1c4      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b56      	ldr	r3, [pc, #344]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4952      	ldr	r1, [pc, #328]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	e03a      	b.n	8003822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b4:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <HAL_RCC_OscConfig+0x2b0>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7ff fa39 	bl	8002c30 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c2:	f7ff fa35 	bl	8002c30 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1a5      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e0:	4b43      	ldr	r3, [pc, #268]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4940      	ldr	r1, [pc, #256]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	600b      	str	r3, [r1, #0]
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f6:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <HAL_RCC_OscConfig+0x2b0>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7ff fa18 	bl	8002c30 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003804:	f7ff fa14 	bl	8002c30 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e184      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d030      	beq.n	8003890 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_RCC_OscConfig+0x2b4>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7ff f9f8 	bl	8002c30 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003844:	f7ff f9f4 	bl	8002c30 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e164      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x200>
 8003862:	e015      	b.n	8003890 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003864:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_OscConfig+0x2b4>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386a:	f7ff f9e1 	bl	8002c30 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003872:	f7ff f9dd 	bl	8002c30 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e14d      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003884:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80a0 	beq.w	80039de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a2:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_OscConfig+0x2b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d121      	bne.n	800391e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_RCC_OscConfig+0x2b8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a07      	ldr	r2, [pc, #28]	; (80038fc <HAL_RCC_OscConfig+0x2b8>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e6:	f7ff f9a3 	bl	8002c30 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	e011      	b.n	8003912 <HAL_RCC_OscConfig+0x2ce>
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	42470000 	.word	0x42470000
 80038f8:	42470e80 	.word	0x42470e80
 80038fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003900:	f7ff f996 	bl	8002c30 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e106      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b85      	ldr	r3, [pc, #532]	; (8003b28 <HAL_RCC_OscConfig+0x4e4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d106      	bne.n	8003934 <HAL_RCC_OscConfig+0x2f0>
 8003926:	4b81      	ldr	r3, [pc, #516]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a80      	ldr	r2, [pc, #512]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
 8003932:	e01c      	b.n	800396e <HAL_RCC_OscConfig+0x32a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x312>
 800393c:	4b7b      	ldr	r3, [pc, #492]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a7a      	ldr	r2, [pc, #488]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
 8003948:	4b78      	ldr	r3, [pc, #480]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	4a77      	ldr	r2, [pc, #476]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6713      	str	r3, [r2, #112]	; 0x70
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x32a>
 8003956:	4b75      	ldr	r3, [pc, #468]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a74      	ldr	r2, [pc, #464]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	4b72      	ldr	r3, [pc, #456]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	4a71      	ldr	r2, [pc, #452]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7ff f95b 	bl	8002c30 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7ff f957 	bl	8002c30 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0c5      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ee      	beq.n	800397e <HAL_RCC_OscConfig+0x33a>
 80039a0:	e014      	b.n	80039cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7ff f945 	bl	8002c30 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7ff f941 	bl	8002c30 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e0af      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	4b5a      	ldr	r3, [pc, #360]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ee      	bne.n	80039aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d2:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a55      	ldr	r2, [pc, #340]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 80039d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 809b 	beq.w	8003b1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d05c      	beq.n	8003aae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d141      	bne.n	8003a80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <HAL_RCC_OscConfig+0x4ec>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7ff f915 	bl	8002c30 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7ff f911 	bl	8002c30 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e081      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1c:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	019b      	lsls	r3, r3, #6
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	3b01      	subs	r3, #1
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	061b      	lsls	r3, r3, #24
 8003a4c:	4937      	ldr	r1, [pc, #220]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <HAL_RCC_OscConfig+0x4ec>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7ff f8ea 	bl	8002c30 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a60:	f7ff f8e6 	bl	8002c30 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e056      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x41c>
 8003a7e:	e04e      	b.n	8003b1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a80:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <HAL_RCC_OscConfig+0x4ec>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7ff f8d3 	bl	8002c30 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7ff f8cf 	bl	8002c30 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e03f      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa0:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x44a>
 8003aac:	e037      	b.n	8003b1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e032      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d028      	beq.n	8003b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d121      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d11a      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aea:	4013      	ands	r3, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003af0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d111      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	42470060 	.word	0x42470060

08003b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0cc      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b68      	ldr	r3, [pc, #416]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d90c      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b65      	ldr	r3, [pc, #404]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b63      	ldr	r3, [pc, #396]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b8      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b88:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a58      	ldr	r2, [pc, #352]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba0:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b50      	ldr	r3, [pc, #320]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	494d      	ldr	r1, [pc, #308]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d044      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b47      	ldr	r3, [pc, #284]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d119      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf2:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e067      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c12:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4934      	ldr	r1, [pc, #208]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c24:	f7ff f804 	bl	8002c30 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7ff f800 	bl	8002c30 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e04f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b2b      	ldr	r3, [pc, #172]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 020c 	and.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1eb      	bne.n	8003c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d20c      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e032      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4916      	ldr	r1, [pc, #88]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	490e      	ldr	r1, [pc, #56]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cba:	f000 f821 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	490a      	ldr	r1, [pc, #40]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	5ccb      	ldrb	r3, [r1, r3]
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x1c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe ff64 	bl	8002ba8 <HAL_InitTick>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023c00 	.word	0x40023c00
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08005984 	.word	0x08005984
 8003cf8:	20000004 	.word	0x20000004
 8003cfc:	20000034 	.word	0x20000034

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	2300      	movs	r3, #0
 8003d12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d18:	4b67      	ldr	r3, [pc, #412]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d00d      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x40>
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	f200 80bd 	bhi.w	8003ea4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d32:	e0b7      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b61      	ldr	r3, [pc, #388]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d36:	60bb      	str	r3, [r7, #8]
       break;
 8003d38:	e0b7      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3a:	4b61      	ldr	r3, [pc, #388]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003d3c:	60bb      	str	r3, [r7, #8]
      break;
 8003d3e:	e0b4      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d40:	4b5d      	ldr	r3, [pc, #372]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d4a:	4b5b      	ldr	r3, [pc, #364]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d04d      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d56:	4b58      	ldr	r3, [pc, #352]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	ea02 0800 	and.w	r8, r2, r0
 8003d6e:	ea03 0901 	and.w	r9, r3, r1
 8003d72:	4640      	mov	r0, r8
 8003d74:	4649      	mov	r1, r9
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	014b      	lsls	r3, r1, #5
 8003d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d84:	0142      	lsls	r2, r0, #5
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	ebb0 0008 	subs.w	r0, r0, r8
 8003d8e:	eb61 0109 	sbc.w	r1, r1, r9
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	018b      	lsls	r3, r1, #6
 8003d9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003da0:	0182      	lsls	r2, r0, #6
 8003da2:	1a12      	subs	r2, r2, r0
 8003da4:	eb63 0301 	sbc.w	r3, r3, r1
 8003da8:	f04f 0000 	mov.w	r0, #0
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	00d9      	lsls	r1, r3, #3
 8003db2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003db6:	00d0      	lsls	r0, r2, #3
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	eb12 0208 	adds.w	r2, r2, r8
 8003dc0:	eb43 0309 	adc.w	r3, r3, r9
 8003dc4:	f04f 0000 	mov.w	r0, #0
 8003dc8:	f04f 0100 	mov.w	r1, #0
 8003dcc:	0259      	lsls	r1, r3, #9
 8003dce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003dd2:	0250      	lsls	r0, r2, #9
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	f7fc f9f0 	bl	80001c8 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4613      	mov	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e04a      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df2:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	ea02 0400 	and.w	r4, r2, r0
 8003e0a:	ea03 0501 	and.w	r5, r3, r1
 8003e0e:	4620      	mov	r0, r4
 8003e10:	4629      	mov	r1, r5
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	014b      	lsls	r3, r1, #5
 8003e1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e20:	0142      	lsls	r2, r0, #5
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	1b00      	subs	r0, r0, r4
 8003e28:	eb61 0105 	sbc.w	r1, r1, r5
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	018b      	lsls	r3, r1, #6
 8003e36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e3a:	0182      	lsls	r2, r0, #6
 8003e3c:	1a12      	subs	r2, r2, r0
 8003e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	00d9      	lsls	r1, r3, #3
 8003e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e50:	00d0      	lsls	r0, r2, #3
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	1912      	adds	r2, r2, r4
 8003e58:	eb45 0303 	adc.w	r3, r5, r3
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	0299      	lsls	r1, r3, #10
 8003e66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e6a:	0290      	lsls	r0, r2, #10
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	f7fc f9a4 	bl	80001c8 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4613      	mov	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	3301      	adds	r3, #1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	60bb      	str	r3, [r7, #8]
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ea6:	60bb      	str	r3, [r7, #8]
      break;
 8003ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	00f42400 	.word	0x00f42400
 8003ec0:	007a1200 	.word	0x007a1200

08003ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000004 	.word	0x20000004

08003edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ee0:	f7ff fff0 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0a9b      	lsrs	r3, r3, #10
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	08005994 	.word	0x08005994

08003f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f08:	f7ff ffdc 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0b5b      	lsrs	r3, r3, #13
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	08005994 	.word	0x08005994

08003f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07b      	b.n	8004036 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d108      	bne.n	8003f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f4e:	d009      	beq.n	8003f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	61da      	str	r2, [r3, #28]
 8003f56:	e005      	b.n	8003f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fd ffc6 	bl	8001f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	ea42 0103 	orr.w	r1, r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	f003 0104 	and.w	r1, r3, #4
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0210 	and.w	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004024:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b088      	sub	sp, #32
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_SPI_Transmit+0x22>
 800405c:	2302      	movs	r3, #2
 800405e:	e126      	b.n	80042ae <HAL_SPI_Transmit+0x270>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004068:	f7fe fde2 	bl	8002c30 <HAL_GetTick>
 800406c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d002      	beq.n	8004084 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800407e:	2302      	movs	r3, #2
 8004080:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004082:	e10b      	b.n	800429c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_SPI_Transmit+0x52>
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004094:	e102      	b.n	800429c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2203      	movs	r2, #3
 800409a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	88fa      	ldrh	r2, [r7, #6]
 80040ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040dc:	d10f      	bne.n	80040fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d007      	beq.n	800411c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800411a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004124:	d14b      	bne.n	80041be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_SPI_Transmit+0xf6>
 800412e:	8afb      	ldrh	r3, [r7, #22]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d13e      	bne.n	80041b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	881a      	ldrh	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	1c9a      	adds	r2, r3, #2
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004158:	e02b      	b.n	80041b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b02      	cmp	r3, #2
 8004166:	d112      	bne.n	800418e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	881a      	ldrh	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	1c9a      	adds	r2, r3, #2
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	86da      	strh	r2, [r3, #54]	; 0x36
 800418c:	e011      	b.n	80041b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800418e:	f7fe fd4f 	bl	8002c30 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d803      	bhi.n	80041a6 <HAL_SPI_Transmit+0x168>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a4:	d102      	bne.n	80041ac <HAL_SPI_Transmit+0x16e>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041b0:	e074      	b.n	800429c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ce      	bne.n	800415a <HAL_SPI_Transmit+0x11c>
 80041bc:	e04c      	b.n	8004258 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_SPI_Transmit+0x18e>
 80041c6:	8afb      	ldrh	r3, [r7, #22]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d140      	bne.n	800424e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041f2:	e02c      	b.n	800424e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d113      	bne.n	800422a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	7812      	ldrb	r2, [r2, #0]
 800420e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	86da      	strh	r2, [r3, #54]	; 0x36
 8004228:	e011      	b.n	800424e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800422a:	f7fe fd01 	bl	8002c30 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d803      	bhi.n	8004242 <HAL_SPI_Transmit+0x204>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004240:	d102      	bne.n	8004248 <HAL_SPI_Transmit+0x20a>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800424c:	e026      	b.n	800429c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1cd      	bne.n	80041f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	6839      	ldr	r1, [r7, #0]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fbcb 	bl	80049f8 <SPI_EndRxTxTransaction>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e000      	b.n	800429c <HAL_SPI_Transmit+0x25e>
  }

error:
 800429a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b088      	sub	sp, #32
 80042ba:	af02      	add	r7, sp, #8
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	603b      	str	r3, [r7, #0]
 80042c2:	4613      	mov	r3, r2
 80042c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d2:	d112      	bne.n	80042fa <HAL_SPI_Receive+0x44>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10e      	bne.n	80042fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2204      	movs	r2, #4
 80042e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042e4:	88fa      	ldrh	r2, [r7, #6]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	4613      	mov	r3, r2
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f8f1 	bl	80044d8 <HAL_SPI_TransmitReceive>
 80042f6:	4603      	mov	r3, r0
 80042f8:	e0ea      	b.n	80044d0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_SPI_Receive+0x52>
 8004304:	2302      	movs	r3, #2
 8004306:	e0e3      	b.n	80044d0 <HAL_SPI_Receive+0x21a>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004310:	f7fe fc8e 	bl	8002c30 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d002      	beq.n	8004328 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004322:	2302      	movs	r3, #2
 8004324:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004326:	e0ca      	b.n	80044be <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_SPI_Receive+0x7e>
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d102      	bne.n	800433a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004338:	e0c1      	b.n	80044be <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2204      	movs	r2, #4
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	88fa      	ldrh	r2, [r7, #6]
 8004352:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004380:	d10f      	bne.n	80043a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004390:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d007      	beq.n	80043c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d162      	bne.n	800448e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043c8:	e02e      	b.n	8004428 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d115      	bne.n	8004404 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f103 020c 	add.w	r2, r3, #12
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004402:	e011      	b.n	8004428 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004404:	f7fe fc14 	bl	8002c30 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d803      	bhi.n	800441c <HAL_SPI_Receive+0x166>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800441a:	d102      	bne.n	8004422 <HAL_SPI_Receive+0x16c>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004426:	e04a      	b.n	80044be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1cb      	bne.n	80043ca <HAL_SPI_Receive+0x114>
 8004432:	e031      	b.n	8004498 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d113      	bne.n	800446a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	b292      	uxth	r2, r2
 800444e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004468:	e011      	b.n	800448e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446a:	f7fe fbe1 	bl	8002c30 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d803      	bhi.n	8004482 <HAL_SPI_Receive+0x1cc>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004480:	d102      	bne.n	8004488 <HAL_SPI_Receive+0x1d2>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800448c:	e017      	b.n	80044be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1cd      	bne.n	8004434 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	6839      	ldr	r1, [r7, #0]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fa45 	bl	800492c <SPI_EndRxTransaction>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
 80044ba:	e000      	b.n	80044be <HAL_SPI_Receive+0x208>
  }

error :
 80044bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08c      	sub	sp, #48	; 0x30
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044e6:	2301      	movs	r3, #1
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x26>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e18a      	b.n	8004814 <HAL_SPI_TransmitReceive+0x33c>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004506:	f7fe fb93 	bl	8002c30 <HAL_GetTick>
 800450a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004524:	2b01      	cmp	r3, #1
 8004526:	d00f      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x70>
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452e:	d107      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d103      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x68>
 8004538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800453c:	2b04      	cmp	r3, #4
 800453e:	d003      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004540:	2302      	movs	r3, #2
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004546:	e15b      	b.n	8004800 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_SPI_TransmitReceive+0x82>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_TransmitReceive+0x82>
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004560:	e14e      	b.n	8004800 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b04      	cmp	r3, #4
 800456c:	d003      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2205      	movs	r2, #5
 8004572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	887a      	ldrh	r2, [r7, #2]
 8004586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	887a      	ldrh	r2, [r7, #2]
 800458c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	887a      	ldrh	r2, [r7, #2]
 800459e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d007      	beq.n	80045ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d2:	d178      	bne.n	80046c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_SPI_TransmitReceive+0x10a>
 80045dc:	8b7b      	ldrh	r3, [r7, #26]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d166      	bne.n	80046b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	881a      	ldrh	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	1c9a      	adds	r2, r3, #2
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004606:	e053      	b.n	80046b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d11b      	bne.n	800464e <HAL_SPI_TransmitReceive+0x176>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d016      	beq.n	800464e <HAL_SPI_TransmitReceive+0x176>
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d113      	bne.n	800464e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	881a      	ldrh	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	1c9a      	adds	r2, r3, #2
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d119      	bne.n	8004690 <HAL_SPI_TransmitReceive+0x1b8>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d014      	beq.n	8004690 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	b292      	uxth	r2, r2
 8004672:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800468c:	2301      	movs	r3, #1
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004690:	f7fe face 	bl	8002c30 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800469c:	429a      	cmp	r2, r3
 800469e:	d807      	bhi.n	80046b0 <HAL_SPI_TransmitReceive+0x1d8>
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a6:	d003      	beq.n	80046b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046ae:	e0a7      	b.n	8004800 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1a6      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x130>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1a1      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x130>
 80046c4:	e07c      	b.n	80047c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x1fc>
 80046ce:	8b7b      	ldrh	r3, [r7, #26]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d16b      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	7812      	ldrb	r2, [r2, #0]
 80046e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046fa:	e057      	b.n	80047ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	d11c      	bne.n	8004744 <HAL_SPI_TransmitReceive+0x26c>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d017      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x26c>
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	2b01      	cmp	r3, #1
 8004718:	d114      	bne.n	8004744 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	7812      	ldrb	r2, [r2, #0]
 8004726:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d119      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x2ae>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d014      	beq.n	8004786 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004782:	2301      	movs	r3, #1
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004786:	f7fe fa53 	bl	8002c30 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004792:	429a      	cmp	r2, r3
 8004794:	d803      	bhi.n	800479e <HAL_SPI_TransmitReceive+0x2c6>
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800479c:	d102      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x2cc>
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d103      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047aa:	e029      	b.n	8004800 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1a2      	bne.n	80046fc <HAL_SPI_TransmitReceive+0x224>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d19d      	bne.n	80046fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f917 	bl	80049f8 <SPI_EndRxTxTransaction>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d006      	beq.n	80047de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047dc:	e010      	b.n	8004800 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10b      	bne.n	80047fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	e000      	b.n	8004800 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004810:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004814:	4618      	mov	r0, r3
 8004816:	3730      	adds	r7, #48	; 0x30
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800482c:	f7fe fa00 	bl	8002c30 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	4413      	add	r3, r2
 800483a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800483c:	f7fe f9f8 	bl	8002c30 <HAL_GetTick>
 8004840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004842:	4b39      	ldr	r3, [pc, #228]	; (8004928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	015b      	lsls	r3, r3, #5
 8004848:	0d1b      	lsrs	r3, r3, #20
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	fb02 f303 	mul.w	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004852:	e054      	b.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800485a:	d050      	beq.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800485c:	f7fe f9e8 	bl	8002c30 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	429a      	cmp	r2, r3
 800486a:	d902      	bls.n	8004872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d13d      	bne.n	80048ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488a:	d111      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004894:	d004      	beq.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489e:	d107      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b8:	d10f      	bne.n	80048da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e017      	b.n	800491e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	429a      	cmp	r2, r3
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	429a      	cmp	r2, r3
 800491a:	d19b      	bne.n	8004854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000004 	.word	0x20000004

0800492c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004940:	d111      	bne.n	8004966 <SPI_EndRxTransaction+0x3a>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494a:	d004      	beq.n	8004956 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004954:	d107      	bne.n	8004966 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004964:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496e:	d12a      	bne.n	80049c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004978:	d012      	beq.n	80049a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2200      	movs	r2, #0
 8004982:	2180      	movs	r1, #128	; 0x80
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff ff49 	bl	800481c <SPI_WaitFlagStateUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d02d      	beq.n	80049ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e026      	b.n	80049ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2200      	movs	r2, #0
 80049a8:	2101      	movs	r1, #1
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff ff36 	bl	800481c <SPI_WaitFlagStateUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01a      	beq.n	80049ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e013      	b.n	80049ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2101      	movs	r1, #1
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff ff23 	bl	800481c <SPI_WaitFlagStateUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e000      	b.n	80049ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <SPI_EndRxTxTransaction+0x7c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <SPI_EndRxTxTransaction+0x80>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0d5b      	lsrs	r3, r3, #21
 8004a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a14:	fb02 f303 	mul.w	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a22:	d112      	bne.n	8004a4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff fef4 	bl	800481c <SPI_WaitFlagStateUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e00f      	b.n	8004a6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d0f2      	beq.n	8004a4a <SPI_EndRxTxTransaction+0x52>
 8004a64:	e000      	b.n	8004a68 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a66:	bf00      	nop
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000004 	.word	0x20000004
 8004a78:	165e9f81 	.word	0x165e9f81

08004a7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e041      	b.n	8004b12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f839 	bl	8004b1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f000 f8fa 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0ae      	b.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b0c      	cmp	r3, #12
 8004b5a:	f200 809f 	bhi.w	8004c9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004b99 	.word	0x08004b99
 8004b68:	08004c9d 	.word	0x08004c9d
 8004b6c:	08004c9d 	.word	0x08004c9d
 8004b70:	08004c9d 	.word	0x08004c9d
 8004b74:	08004bd9 	.word	0x08004bd9
 8004b78:	08004c9d 	.word	0x08004c9d
 8004b7c:	08004c9d 	.word	0x08004c9d
 8004b80:	08004c9d 	.word	0x08004c9d
 8004b84:	08004c1b 	.word	0x08004c1b
 8004b88:	08004c9d 	.word	0x08004c9d
 8004b8c:	08004c9d 	.word	0x08004c9d
 8004b90:	08004c9d 	.word	0x08004c9d
 8004b94:	08004c5b 	.word	0x08004c5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f928 	bl	8004df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0208 	orr.w	r2, r2, #8
 8004bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0204 	bic.w	r2, r2, #4
 8004bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6999      	ldr	r1, [r3, #24]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	619a      	str	r2, [r3, #24]
      break;
 8004bd6:	e064      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f978 	bl	8004ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6999      	ldr	r1, [r3, #24]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	021a      	lsls	r2, r3, #8
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	619a      	str	r2, [r3, #24]
      break;
 8004c18:	e043      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 f9cd 	bl	8004fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0208 	orr.w	r2, r2, #8
 8004c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0204 	bic.w	r2, r2, #4
 8004c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69d9      	ldr	r1, [r3, #28]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	61da      	str	r2, [r3, #28]
      break;
 8004c58:	e023      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fa21 	bl	80050a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69d9      	ldr	r1, [r3, #28]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	021a      	lsls	r2, r3, #8
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	61da      	str	r2, [r3, #28]
      break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a40      	ldr	r2, [pc, #256]	; (8004dc8 <TIM_Base_SetConfig+0x114>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd2:	d00f      	beq.n	8004cf4 <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3d      	ldr	r2, [pc, #244]	; (8004dcc <TIM_Base_SetConfig+0x118>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00b      	beq.n	8004cf4 <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3c      	ldr	r2, [pc, #240]	; (8004dd0 <TIM_Base_SetConfig+0x11c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d007      	beq.n	8004cf4 <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a3b      	ldr	r2, [pc, #236]	; (8004dd4 <TIM_Base_SetConfig+0x120>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_Base_SetConfig+0x40>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a3a      	ldr	r2, [pc, #232]	; (8004dd8 <TIM_Base_SetConfig+0x124>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d108      	bne.n	8004d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2f      	ldr	r2, [pc, #188]	; (8004dc8 <TIM_Base_SetConfig+0x114>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d02b      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d14:	d027      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2c      	ldr	r2, [pc, #176]	; (8004dcc <TIM_Base_SetConfig+0x118>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d023      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2b      	ldr	r2, [pc, #172]	; (8004dd0 <TIM_Base_SetConfig+0x11c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01f      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a2a      	ldr	r2, [pc, #168]	; (8004dd4 <TIM_Base_SetConfig+0x120>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d01b      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a29      	ldr	r2, [pc, #164]	; (8004dd8 <TIM_Base_SetConfig+0x124>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d017      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <TIM_Base_SetConfig+0x128>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a27      	ldr	r2, [pc, #156]	; (8004de0 <TIM_Base_SetConfig+0x12c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00f      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <TIM_Base_SetConfig+0x130>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a25      	ldr	r2, [pc, #148]	; (8004de8 <TIM_Base_SetConfig+0x134>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d007      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a24      	ldr	r2, [pc, #144]	; (8004dec <TIM_Base_SetConfig+0x138>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a23      	ldr	r2, [pc, #140]	; (8004df0 <TIM_Base_SetConfig+0x13c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d108      	bne.n	8004d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <TIM_Base_SetConfig+0x114>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_Base_SetConfig+0xf8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a0c      	ldr	r2, [pc, #48]	; (8004dd8 <TIM_Base_SetConfig+0x124>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d103      	bne.n	8004db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	615a      	str	r2, [r3, #20]
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40010400 	.word	0x40010400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800
 8004de8:	40001800 	.word	0x40001800
 8004dec:	40001c00 	.word	0x40001c00
 8004df0:	40002000 	.word	0x40002000

08004df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0201 	bic.w	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f023 0302 	bic.w	r3, r3, #2
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a20      	ldr	r2, [pc, #128]	; (8004ecc <TIM_OC1_SetConfig+0xd8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_OC1_SetConfig+0x64>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <TIM_OC1_SetConfig+0xdc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d10c      	bne.n	8004e72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 0308 	bic.w	r3, r3, #8
 8004e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <TIM_OC1_SetConfig+0xd8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_OC1_SetConfig+0x8e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <TIM_OC1_SetConfig+0xdc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d111      	bne.n	8004ea6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	621a      	str	r2, [r3, #32]
}
 8004ec0:	bf00      	nop
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40010400 	.word	0x40010400

08004ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0210 	bic.w	r2, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0320 	bic.w	r3, r3, #32
 8004f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <TIM_OC2_SetConfig+0xe4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_OC2_SetConfig+0x68>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <TIM_OC2_SetConfig+0xe8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10d      	bne.n	8004f58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <TIM_OC2_SetConfig+0xe4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_OC2_SetConfig+0x94>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <TIM_OC2_SetConfig+0xe8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d113      	bne.n	8004f90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40010400 	.word	0x40010400

08004fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a21      	ldr	r2, [pc, #132]	; (80050a0 <TIM_OC3_SetConfig+0xe0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_OC3_SetConfig+0x66>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <TIM_OC3_SetConfig+0xe4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10d      	bne.n	8005042 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800502c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <TIM_OC3_SetConfig+0xe0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC3_SetConfig+0x92>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <TIM_OC3_SetConfig+0xe4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d113      	bne.n	800507a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40010400 	.word	0x40010400

080050a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	031b      	lsls	r3, r3, #12
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a12      	ldr	r2, [pc, #72]	; (800514c <TIM_OC4_SetConfig+0xa4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_OC4_SetConfig+0x68>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a11      	ldr	r2, [pc, #68]	; (8005150 <TIM_OC4_SetConfig+0xa8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d109      	bne.n	8005124 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000
 8005150:	40010400 	.word	0x40010400

08005154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005168:	2302      	movs	r3, #2
 800516a:	e05a      	b.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a21      	ldr	r2, [pc, #132]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d022      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b8:	d01d      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d018      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1a      	ldr	r2, [pc, #104]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a18      	ldr	r2, [pc, #96]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a17      	ldr	r2, [pc, #92]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a15      	ldr	r2, [pc, #84]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10c      	bne.n	8005210 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	4313      	orrs	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40010400 	.word	0x40010400
 8005244:	40014000 	.word	0x40014000
 8005248:	40001800 	.word	0x40001800

0800524c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005264:	2302      	movs	r3, #2
 8005266:	e03d      	b.n	80052e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e03f      	b.n	8005382 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fc fec4 	bl	80020a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2224      	movs	r2, #36	; 0x24
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f829 	bl	800538c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005390:	b09f      	sub	sp, #124	; 0x7c
 8005392:	af00      	add	r7, sp, #0
 8005394:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	68d9      	ldr	r1, [r3, #12]
 80053a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	ea40 0301 	orr.w	r3, r0, r1
 80053ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	431a      	orrs	r2, r3
 80053be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80053c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053d0:	f021 010c 	bic.w	r1, r1, #12
 80053d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053da:	430b      	orrs	r3, r1
 80053dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ea:	6999      	ldr	r1, [r3, #24]
 80053ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	ea40 0301 	orr.w	r3, r0, r1
 80053f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4bc5      	ldr	r3, [pc, #788]	; (8005710 <UART_SetConfig+0x384>)
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d004      	beq.n	800540a <UART_SetConfig+0x7e>
 8005400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	4bc3      	ldr	r3, [pc, #780]	; (8005714 <UART_SetConfig+0x388>)
 8005406:	429a      	cmp	r2, r3
 8005408:	d103      	bne.n	8005412 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800540a:	f7fe fd7b 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 800540e:	6778      	str	r0, [r7, #116]	; 0x74
 8005410:	e002      	b.n	8005418 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005412:	f7fe fd63 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8005416:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005420:	f040 80b6 	bne.w	8005590 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005426:	461c      	mov	r4, r3
 8005428:	f04f 0500 	mov.w	r5, #0
 800542c:	4622      	mov	r2, r4
 800542e:	462b      	mov	r3, r5
 8005430:	1891      	adds	r1, r2, r2
 8005432:	6439      	str	r1, [r7, #64]	; 0x40
 8005434:	415b      	adcs	r3, r3
 8005436:	647b      	str	r3, [r7, #68]	; 0x44
 8005438:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800543c:	1912      	adds	r2, r2, r4
 800543e:	eb45 0303 	adc.w	r3, r5, r3
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	00d9      	lsls	r1, r3, #3
 800544c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005450:	00d0      	lsls	r0, r2, #3
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	1911      	adds	r1, r2, r4
 8005458:	6639      	str	r1, [r7, #96]	; 0x60
 800545a:	416b      	adcs	r3, r5
 800545c:	667b      	str	r3, [r7, #100]	; 0x64
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	461a      	mov	r2, r3
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	1891      	adds	r1, r2, r2
 800546a:	63b9      	str	r1, [r7, #56]	; 0x38
 800546c:	415b      	adcs	r3, r3
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005474:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005478:	f7fa fea6 	bl	80001c8 <__aeabi_uldivmod>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4ba5      	ldr	r3, [pc, #660]	; (8005718 <UART_SetConfig+0x38c>)
 8005482:	fba3 2302 	umull	r2, r3, r3, r2
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	011e      	lsls	r6, r3, #4
 800548a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548c:	461c      	mov	r4, r3
 800548e:	f04f 0500 	mov.w	r5, #0
 8005492:	4622      	mov	r2, r4
 8005494:	462b      	mov	r3, r5
 8005496:	1891      	adds	r1, r2, r2
 8005498:	6339      	str	r1, [r7, #48]	; 0x30
 800549a:	415b      	adcs	r3, r3
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
 800549e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054a2:	1912      	adds	r2, r2, r4
 80054a4:	eb45 0303 	adc.w	r3, r5, r3
 80054a8:	f04f 0000 	mov.w	r0, #0
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	00d9      	lsls	r1, r3, #3
 80054b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b6:	00d0      	lsls	r0, r2, #3
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	1911      	adds	r1, r2, r4
 80054be:	65b9      	str	r1, [r7, #88]	; 0x58
 80054c0:	416b      	adcs	r3, r5
 80054c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	461a      	mov	r2, r3
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	1891      	adds	r1, r2, r2
 80054d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80054d2:	415b      	adcs	r3, r3
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80054de:	f7fa fe73 	bl	80001c8 <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4b8c      	ldr	r3, [pc, #560]	; (8005718 <UART_SetConfig+0x38c>)
 80054e8:	fba3 1302 	umull	r1, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	2164      	movs	r1, #100	; 0x64
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	3332      	adds	r3, #50	; 0x32
 80054fa:	4a87      	ldr	r2, [pc, #540]	; (8005718 <UART_SetConfig+0x38c>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005508:	441e      	add	r6, r3
 800550a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550c:	4618      	mov	r0, r3
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	1894      	adds	r4, r2, r2
 8005518:	623c      	str	r4, [r7, #32]
 800551a:	415b      	adcs	r3, r3
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005522:	1812      	adds	r2, r2, r0
 8005524:	eb41 0303 	adc.w	r3, r1, r3
 8005528:	f04f 0400 	mov.w	r4, #0
 800552c:	f04f 0500 	mov.w	r5, #0
 8005530:	00dd      	lsls	r5, r3, #3
 8005532:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005536:	00d4      	lsls	r4, r2, #3
 8005538:	4622      	mov	r2, r4
 800553a:	462b      	mov	r3, r5
 800553c:	1814      	adds	r4, r2, r0
 800553e:	653c      	str	r4, [r7, #80]	; 0x50
 8005540:	414b      	adcs	r3, r1
 8005542:	657b      	str	r3, [r7, #84]	; 0x54
 8005544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	461a      	mov	r2, r3
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	1891      	adds	r1, r2, r2
 8005550:	61b9      	str	r1, [r7, #24]
 8005552:	415b      	adcs	r3, r3
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800555a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800555e:	f7fa fe33 	bl	80001c8 <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <UART_SetConfig+0x38c>)
 8005568:	fba3 1302 	umull	r1, r3, r3, r2
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	2164      	movs	r1, #100	; 0x64
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	3332      	adds	r3, #50	; 0x32
 800557a:	4a67      	ldr	r2, [pc, #412]	; (8005718 <UART_SetConfig+0x38c>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	f003 0207 	and.w	r2, r3, #7
 8005586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4432      	add	r2, r6
 800558c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800558e:	e0b9      	b.n	8005704 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005592:	461c      	mov	r4, r3
 8005594:	f04f 0500 	mov.w	r5, #0
 8005598:	4622      	mov	r2, r4
 800559a:	462b      	mov	r3, r5
 800559c:	1891      	adds	r1, r2, r2
 800559e:	6139      	str	r1, [r7, #16]
 80055a0:	415b      	adcs	r3, r3
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055a8:	1912      	adds	r2, r2, r4
 80055aa:	eb45 0303 	adc.w	r3, r5, r3
 80055ae:	f04f 0000 	mov.w	r0, #0
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	00d9      	lsls	r1, r3, #3
 80055b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055bc:	00d0      	lsls	r0, r2, #3
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	eb12 0804 	adds.w	r8, r2, r4
 80055c6:	eb43 0905 	adc.w	r9, r3, r5
 80055ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	008b      	lsls	r3, r1, #2
 80055de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055e2:	0082      	lsls	r2, r0, #2
 80055e4:	4640      	mov	r0, r8
 80055e6:	4649      	mov	r1, r9
 80055e8:	f7fa fdee 	bl	80001c8 <__aeabi_uldivmod>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4b49      	ldr	r3, [pc, #292]	; (8005718 <UART_SetConfig+0x38c>)
 80055f2:	fba3 2302 	umull	r2, r3, r3, r2
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	011e      	lsls	r6, r3, #4
 80055fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fc:	4618      	mov	r0, r3
 80055fe:	f04f 0100 	mov.w	r1, #0
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	1894      	adds	r4, r2, r2
 8005608:	60bc      	str	r4, [r7, #8]
 800560a:	415b      	adcs	r3, r3
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005612:	1812      	adds	r2, r2, r0
 8005614:	eb41 0303 	adc.w	r3, r1, r3
 8005618:	f04f 0400 	mov.w	r4, #0
 800561c:	f04f 0500 	mov.w	r5, #0
 8005620:	00dd      	lsls	r5, r3, #3
 8005622:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005626:	00d4      	lsls	r4, r2, #3
 8005628:	4622      	mov	r2, r4
 800562a:	462b      	mov	r3, r5
 800562c:	1814      	adds	r4, r2, r0
 800562e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005630:	414b      	adcs	r3, r1
 8005632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4618      	mov	r0, r3
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	008b      	lsls	r3, r1, #2
 8005648:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800564c:	0082      	lsls	r2, r0, #2
 800564e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005652:	f7fa fdb9 	bl	80001c8 <__aeabi_uldivmod>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4b2f      	ldr	r3, [pc, #188]	; (8005718 <UART_SetConfig+0x38c>)
 800565c:	fba3 1302 	umull	r1, r3, r3, r2
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	2164      	movs	r1, #100	; 0x64
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	3332      	adds	r3, #50	; 0x32
 800566e:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <UART_SetConfig+0x38c>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800567a:	441e      	add	r6, r3
 800567c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800567e:	4618      	mov	r0, r3
 8005680:	f04f 0100 	mov.w	r1, #0
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	1894      	adds	r4, r2, r2
 800568a:	603c      	str	r4, [r7, #0]
 800568c:	415b      	adcs	r3, r3
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005694:	1812      	adds	r2, r2, r0
 8005696:	eb41 0303 	adc.w	r3, r1, r3
 800569a:	f04f 0400 	mov.w	r4, #0
 800569e:	f04f 0500 	mov.w	r5, #0
 80056a2:	00dd      	lsls	r5, r3, #3
 80056a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056a8:	00d4      	lsls	r4, r2, #3
 80056aa:	4622      	mov	r2, r4
 80056ac:	462b      	mov	r3, r5
 80056ae:	eb12 0a00 	adds.w	sl, r2, r0
 80056b2:	eb43 0b01 	adc.w	fp, r3, r1
 80056b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f04f 0100 	mov.w	r1, #0
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	008b      	lsls	r3, r1, #2
 80056ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056ce:	0082      	lsls	r2, r0, #2
 80056d0:	4650      	mov	r0, sl
 80056d2:	4659      	mov	r1, fp
 80056d4:	f7fa fd78 	bl	80001c8 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <UART_SetConfig+0x38c>)
 80056de:	fba3 1302 	umull	r1, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2164      	movs	r1, #100	; 0x64
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	3332      	adds	r3, #50	; 0x32
 80056f0:	4a09      	ldr	r2, [pc, #36]	; (8005718 <UART_SetConfig+0x38c>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4432      	add	r2, r6
 8005702:	609a      	str	r2, [r3, #8]
}
 8005704:	bf00      	nop
 8005706:	377c      	adds	r7, #124	; 0x7c
 8005708:	46bd      	mov	sp, r7
 800570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570e:	bf00      	nop
 8005710:	40011000 	.word	0x40011000
 8005714:	40011400 	.word	0x40011400
 8005718:	51eb851f 	.word	0x51eb851f

0800571c <_Znwj>:
 800571c:	2801      	cmp	r0, #1
 800571e:	bf38      	it	cc
 8005720:	2001      	movcc	r0, #1
 8005722:	b510      	push	{r4, lr}
 8005724:	4604      	mov	r4, r0
 8005726:	4620      	mov	r0, r4
 8005728:	f000 f844 	bl	80057b4 <malloc>
 800572c:	b930      	cbnz	r0, 800573c <_Znwj+0x20>
 800572e:	f000 f807 	bl	8005740 <_ZSt15get_new_handlerv>
 8005732:	b908      	cbnz	r0, 8005738 <_Znwj+0x1c>
 8005734:	f000 f80c 	bl	8005750 <abort>
 8005738:	4780      	blx	r0
 800573a:	e7f4      	b.n	8005726 <_Znwj+0xa>
 800573c:	bd10      	pop	{r4, pc}
	...

08005740 <_ZSt15get_new_handlerv>:
 8005740:	4b02      	ldr	r3, [pc, #8]	; (800574c <_ZSt15get_new_handlerv+0xc>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	f3bf 8f5b 	dmb	ish
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	200002f0 	.word	0x200002f0

08005750 <abort>:
 8005750:	b508      	push	{r3, lr}
 8005752:	2006      	movs	r0, #6
 8005754:	f000 f8de 	bl	8005914 <raise>
 8005758:	2001      	movs	r0, #1
 800575a:	f7fc fd4d 	bl	80021f8 <_exit>
	...

08005760 <__errno>:
 8005760:	4b01      	ldr	r3, [pc, #4]	; (8005768 <__errno+0x8>)
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	2000003c 	.word	0x2000003c

0800576c <__libc_init_array>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	4d0d      	ldr	r5, [pc, #52]	; (80057a4 <__libc_init_array+0x38>)
 8005770:	4c0d      	ldr	r4, [pc, #52]	; (80057a8 <__libc_init_array+0x3c>)
 8005772:	1b64      	subs	r4, r4, r5
 8005774:	10a4      	asrs	r4, r4, #2
 8005776:	2600      	movs	r6, #0
 8005778:	42a6      	cmp	r6, r4
 800577a:	d109      	bne.n	8005790 <__libc_init_array+0x24>
 800577c:	4d0b      	ldr	r5, [pc, #44]	; (80057ac <__libc_init_array+0x40>)
 800577e:	4c0c      	ldr	r4, [pc, #48]	; (80057b0 <__libc_init_array+0x44>)
 8005780:	f000 f8f2 	bl	8005968 <_init>
 8005784:	1b64      	subs	r4, r4, r5
 8005786:	10a4      	asrs	r4, r4, #2
 8005788:	2600      	movs	r6, #0
 800578a:	42a6      	cmp	r6, r4
 800578c:	d105      	bne.n	800579a <__libc_init_array+0x2e>
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	f855 3b04 	ldr.w	r3, [r5], #4
 8005794:	4798      	blx	r3
 8005796:	3601      	adds	r6, #1
 8005798:	e7ee      	b.n	8005778 <__libc_init_array+0xc>
 800579a:	f855 3b04 	ldr.w	r3, [r5], #4
 800579e:	4798      	blx	r3
 80057a0:	3601      	adds	r6, #1
 80057a2:	e7f2      	b.n	800578a <__libc_init_array+0x1e>
 80057a4:	080059a4 	.word	0x080059a4
 80057a8:	080059a4 	.word	0x080059a4
 80057ac:	080059a4 	.word	0x080059a4
 80057b0:	080059a8 	.word	0x080059a8

080057b4 <malloc>:
 80057b4:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <malloc+0xc>)
 80057b6:	4601      	mov	r1, r0
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	f000 b819 	b.w	80057f0 <_malloc_r>
 80057be:	bf00      	nop
 80057c0:	2000003c 	.word	0x2000003c

080057c4 <memcpy>:
 80057c4:	440a      	add	r2, r1
 80057c6:	4291      	cmp	r1, r2
 80057c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057cc:	d100      	bne.n	80057d0 <memcpy+0xc>
 80057ce:	4770      	bx	lr
 80057d0:	b510      	push	{r4, lr}
 80057d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057da:	4291      	cmp	r1, r2
 80057dc:	d1f9      	bne.n	80057d2 <memcpy+0xe>
 80057de:	bd10      	pop	{r4, pc}

080057e0 <memset>:
 80057e0:	4402      	add	r2, r0
 80057e2:	4603      	mov	r3, r0
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d100      	bne.n	80057ea <memset+0xa>
 80057e8:	4770      	bx	lr
 80057ea:	f803 1b01 	strb.w	r1, [r3], #1
 80057ee:	e7f9      	b.n	80057e4 <memset+0x4>

080057f0 <_malloc_r>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	1ccd      	adds	r5, r1, #3
 80057f4:	f025 0503 	bic.w	r5, r5, #3
 80057f8:	3508      	adds	r5, #8
 80057fa:	2d0c      	cmp	r5, #12
 80057fc:	bf38      	it	cc
 80057fe:	250c      	movcc	r5, #12
 8005800:	2d00      	cmp	r5, #0
 8005802:	4606      	mov	r6, r0
 8005804:	db01      	blt.n	800580a <_malloc_r+0x1a>
 8005806:	42a9      	cmp	r1, r5
 8005808:	d903      	bls.n	8005812 <_malloc_r+0x22>
 800580a:	230c      	movs	r3, #12
 800580c:	6033      	str	r3, [r6, #0]
 800580e:	2000      	movs	r0, #0
 8005810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005812:	f000 f89b 	bl	800594c <__malloc_lock>
 8005816:	4921      	ldr	r1, [pc, #132]	; (800589c <_malloc_r+0xac>)
 8005818:	680a      	ldr	r2, [r1, #0]
 800581a:	4614      	mov	r4, r2
 800581c:	b99c      	cbnz	r4, 8005846 <_malloc_r+0x56>
 800581e:	4f20      	ldr	r7, [pc, #128]	; (80058a0 <_malloc_r+0xb0>)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	b923      	cbnz	r3, 800582e <_malloc_r+0x3e>
 8005824:	4621      	mov	r1, r4
 8005826:	4630      	mov	r0, r6
 8005828:	f000 f83c 	bl	80058a4 <_sbrk_r>
 800582c:	6038      	str	r0, [r7, #0]
 800582e:	4629      	mov	r1, r5
 8005830:	4630      	mov	r0, r6
 8005832:	f000 f837 	bl	80058a4 <_sbrk_r>
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	d123      	bne.n	8005882 <_malloc_r+0x92>
 800583a:	230c      	movs	r3, #12
 800583c:	6033      	str	r3, [r6, #0]
 800583e:	4630      	mov	r0, r6
 8005840:	f000 f88a 	bl	8005958 <__malloc_unlock>
 8005844:	e7e3      	b.n	800580e <_malloc_r+0x1e>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	1b5b      	subs	r3, r3, r5
 800584a:	d417      	bmi.n	800587c <_malloc_r+0x8c>
 800584c:	2b0b      	cmp	r3, #11
 800584e:	d903      	bls.n	8005858 <_malloc_r+0x68>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	441c      	add	r4, r3
 8005854:	6025      	str	r5, [r4, #0]
 8005856:	e004      	b.n	8005862 <_malloc_r+0x72>
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	42a2      	cmp	r2, r4
 800585c:	bf0c      	ite	eq
 800585e:	600b      	streq	r3, [r1, #0]
 8005860:	6053      	strne	r3, [r2, #4]
 8005862:	4630      	mov	r0, r6
 8005864:	f000 f878 	bl	8005958 <__malloc_unlock>
 8005868:	f104 000b 	add.w	r0, r4, #11
 800586c:	1d23      	adds	r3, r4, #4
 800586e:	f020 0007 	bic.w	r0, r0, #7
 8005872:	1ac2      	subs	r2, r0, r3
 8005874:	d0cc      	beq.n	8005810 <_malloc_r+0x20>
 8005876:	1a1b      	subs	r3, r3, r0
 8005878:	50a3      	str	r3, [r4, r2]
 800587a:	e7c9      	b.n	8005810 <_malloc_r+0x20>
 800587c:	4622      	mov	r2, r4
 800587e:	6864      	ldr	r4, [r4, #4]
 8005880:	e7cc      	b.n	800581c <_malloc_r+0x2c>
 8005882:	1cc4      	adds	r4, r0, #3
 8005884:	f024 0403 	bic.w	r4, r4, #3
 8005888:	42a0      	cmp	r0, r4
 800588a:	d0e3      	beq.n	8005854 <_malloc_r+0x64>
 800588c:	1a21      	subs	r1, r4, r0
 800588e:	4630      	mov	r0, r6
 8005890:	f000 f808 	bl	80058a4 <_sbrk_r>
 8005894:	3001      	adds	r0, #1
 8005896:	d1dd      	bne.n	8005854 <_malloc_r+0x64>
 8005898:	e7cf      	b.n	800583a <_malloc_r+0x4a>
 800589a:	bf00      	nop
 800589c:	200002f4 	.word	0x200002f4
 80058a0:	200002f8 	.word	0x200002f8

080058a4 <_sbrk_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d06      	ldr	r5, [pc, #24]	; (80058c0 <_sbrk_r+0x1c>)
 80058a8:	2300      	movs	r3, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	f7fc fcac 	bl	800220c <_sbrk>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_sbrk_r+0x1a>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_sbrk_r+0x1a>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	20000300 	.word	0x20000300

080058c4 <_raise_r>:
 80058c4:	291f      	cmp	r1, #31
 80058c6:	b538      	push	{r3, r4, r5, lr}
 80058c8:	4604      	mov	r4, r0
 80058ca:	460d      	mov	r5, r1
 80058cc:	d904      	bls.n	80058d8 <_raise_r+0x14>
 80058ce:	2316      	movs	r3, #22
 80058d0:	6003      	str	r3, [r0, #0]
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80058da:	b112      	cbz	r2, 80058e2 <_raise_r+0x1e>
 80058dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80058e0:	b94b      	cbnz	r3, 80058f6 <_raise_r+0x32>
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 f830 	bl	8005948 <_getpid_r>
 80058e8:	462a      	mov	r2, r5
 80058ea:	4601      	mov	r1, r0
 80058ec:	4620      	mov	r0, r4
 80058ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f2:	f000 b817 	b.w	8005924 <_kill_r>
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d00a      	beq.n	8005910 <_raise_r+0x4c>
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	d103      	bne.n	8005906 <_raise_r+0x42>
 80058fe:	2316      	movs	r3, #22
 8005900:	6003      	str	r3, [r0, #0]
 8005902:	2001      	movs	r0, #1
 8005904:	e7e7      	b.n	80058d6 <_raise_r+0x12>
 8005906:	2400      	movs	r4, #0
 8005908:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800590c:	4628      	mov	r0, r5
 800590e:	4798      	blx	r3
 8005910:	2000      	movs	r0, #0
 8005912:	e7e0      	b.n	80058d6 <_raise_r+0x12>

08005914 <raise>:
 8005914:	4b02      	ldr	r3, [pc, #8]	; (8005920 <raise+0xc>)
 8005916:	4601      	mov	r1, r0
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	f7ff bfd3 	b.w	80058c4 <_raise_r>
 800591e:	bf00      	nop
 8005920:	2000003c 	.word	0x2000003c

08005924 <_kill_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4d07      	ldr	r5, [pc, #28]	; (8005944 <_kill_r+0x20>)
 8005928:	2300      	movs	r3, #0
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	f7fc fc51 	bl	80021d8 <_kill>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	d102      	bne.n	8005940 <_kill_r+0x1c>
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	b103      	cbz	r3, 8005940 <_kill_r+0x1c>
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	bd38      	pop	{r3, r4, r5, pc}
 8005942:	bf00      	nop
 8005944:	20000300 	.word	0x20000300

08005948 <_getpid_r>:
 8005948:	f7fc bc3e 	b.w	80021c8 <_getpid>

0800594c <__malloc_lock>:
 800594c:	4801      	ldr	r0, [pc, #4]	; (8005954 <__malloc_lock+0x8>)
 800594e:	f000 b809 	b.w	8005964 <__retarget_lock_acquire_recursive>
 8005952:	bf00      	nop
 8005954:	20000308 	.word	0x20000308

08005958 <__malloc_unlock>:
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <__malloc_unlock+0x8>)
 800595a:	f000 b804 	b.w	8005966 <__retarget_lock_release_recursive>
 800595e:	bf00      	nop
 8005960:	20000308 	.word	0x20000308

08005964 <__retarget_lock_acquire_recursive>:
 8005964:	4770      	bx	lr

08005966 <__retarget_lock_release_recursive>:
 8005966:	4770      	bx	lr

08005968 <_init>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr

08005974 <_fini>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr
